var documenterSearchIndex = {"docs":
[{"location":"references/#References","page":"References","title":"References","text":"","category":"section"},{"location":"references/","page":"References","title":"References","text":"R. Plonsey. Volume Conductor Fields of Action Currents. Biophysical Journal 4, 317–328 (1964).\n\n\n\nD. Ogiermann, D. Balzani and L. E. Perotti. The Effect of Modeling Assumptions on the ECG in Monodomain and Bidomain Simulations. In: Functional Imaging and Modeling of the Heart, Vol. 12738, edited by D. B. Ennis, L. E. Perotti and V. Y. Wang (Springer International Publishing, Cham, 2021); pp. 503–514.\n\n\n\nS. Göktepe, A. Menzel and E. Kuhl. The Generalized Hill Model: A Kinematic Approach towards Active Muscle Contraction. Journal of the Mechanics and Physics of Solids 72, 20–39 (2014).\n\n\n\n","category":"page"},{"location":"references/","page":"References","title":"References","text":"<!--","category":"page"},{"location":"references/","page":"References","title":"References","text":"Workaround for https://github.com/JuliaDocs/DocumenterCitations.jl/issues/39","category":"page"},{"location":"references/","page":"References","title":"References","text":"[3]\n[1]\n[2]","category":"page"},{"location":"references/","page":"References","title":"References","text":"-->","category":"page"},{"location":"devdocs/#Developer-documentation","page":"Developer documentation","title":"Developer documentation","text":"","category":"section"},{"location":"devdocs/","page":"Developer documentation","title":"Developer documentation","text":"More devdocs coming soon.","category":"page"},{"location":"devdocs/","page":"Developer documentation","title":"Developer documentation","text":"Question: The solver is definitely responsible for managing the solution vectors, but who is responsible for setting up projectors, dof handlers and constriant handlers?","category":"page"},{"location":"devdocs/#Design-details","page":"Developer documentation","title":"Design details","text":"","category":"section"},{"location":"devdocs/#Modeling","page":"Developer documentation","title":"Modeling","text":"","category":"section"},{"location":"devdocs/","page":"Developer documentation","title":"Developer documentation","text":"Questions:","category":"page"},{"location":"devdocs/","page":"Developer documentation","title":"Developer documentation","text":"How to pass and solve state information for internal variables around?","category":"page"},{"location":"devdocs/#Operators","page":"Developer documentation","title":"Operators","text":"","category":"section"},{"location":"devdocs/","page":"Developer documentation","title":"Developer documentation","text":"assemble_element","category":"page"},{"location":"devdocs/","page":"Developer documentation","title":"Developer documentation","text":"Questions:","category":"page"},{"location":"devdocs/","page":"Developer documentation","title":"Developer documentation","text":"How to deal with quasi-static problems which also need velocities?\nHow to make recursive assemble_element definitions for volume coupled problems?","category":"page"},{"location":"devdocs/#Solver","page":"Developer documentation","title":"Solver","text":"","category":"section"},{"location":"devdocs/","page":"Developer documentation","title":"Developer documentation","text":"setup_solver_caches(problem, solver, t₀) takes the problem and a solver to setup the operators needed during solve.","category":"page"},{"location":"devdocs/","page":"Developer documentation","title":"Developer documentation","text":"Questions: ","category":"page"},{"location":"devdocs/","page":"Developer documentation","title":"Developer documentation","text":"How to control which exact operator?\nWhen and how to check if the operator is compatible with the solver?","category":"page"},{"location":"devdocs/","page":"Developer documentation","title":"Developer documentation","text":"See also my brain flushing in real time some design decisions.","category":"page"},{"location":"howto/benchmarking/#Benchmarking","page":"Benchmarking","title":"Benchmarking","text":"","category":"section"},{"location":"howto/benchmarking/","page":"Benchmarking","title":"Benchmarking","text":"To investiage the performance we can use the following code snippet, which should be self-explanatory","category":"page"},{"location":"howto/benchmarking/","page":"Benchmarking","title":"Benchmarking","text":"using Thunderbolt.TimerOutputs\nTimerOutputs.enable_debug_timings(Thunderbolt)\nTimerOutputs.reset_timer!()\nrun_simulation()\nTimerOutputs.print_timer()\nTimerOutputs.disable_debug_timings(Thunderbolt)","category":"page"},{"location":"howto/benchmarking/","page":"Benchmarking","title":"Benchmarking","text":"It makes sense to make sure the code is properly precompiled before benchmarkins, e.g. by calling run_simulation() once before running the code snippet.","category":"page"},{"location":"howto/benchmarking/","page":"Benchmarking","title":"Benchmarking","text":"Internally we use TimerOutputs.jl for code annotations, marking performance critical sections.","category":"page"},{"location":"howto/benchmarking/","page":"Benchmarking","title":"Benchmarking","text":"More guides coming soon...","category":"page"},{"location":"api-reference/models/","page":"Models","title":"Models","text":"DocTestSetup = :(using Thunderbolt)","category":"page"},{"location":"api-reference/models/#Models","page":"Models","title":"Models","text":"","category":"section"},{"location":"api-reference/models/#Coefficient","page":"Models","title":"Coefficient","text":"","category":"section"},{"location":"api-reference/models/","page":"Models","title":"Models","text":"ConstantCoefficient\nFieldCoefficient\nAnalyticalCoefficient\nSpectralTensorCoefficient\nSpatiallyHomogeneousDataField\nevaluate_coefficient\nCartesianCoordinateSystemCoefficient","category":"page"},{"location":"api-reference/models/#Thunderbolt.ConstantCoefficient","page":"Models","title":"Thunderbolt.ConstantCoefficient","text":"ConstantCoefficient\n\nConstant in space and time data.\n\n\n\n\n\n","category":"type"},{"location":"api-reference/models/#Thunderbolt.FieldCoefficient","page":"Models","title":"Thunderbolt.FieldCoefficient","text":"FieldCoefficient\n\nA constant in time data field, interpolated per element with a given interpolation.\n\n\n\n\n\n","category":"type"},{"location":"api-reference/models/#Thunderbolt.SpectralTensorCoefficient","page":"Models","title":"Thunderbolt.SpectralTensorCoefficient","text":"SpectralTensorCoefficient\n\nRepresent a tensor A via spectral decomposition ∑ᵢ λᵢ vᵢ ⊗ vᵢ.\n\n\n\n\n\n","category":"type"},{"location":"api-reference/models/#Thunderbolt.SpatiallyHomogeneousDataField","page":"Models","title":"Thunderbolt.SpatiallyHomogeneousDataField","text":"SpatiallyHomogeneousDataField\n\nA data field which is constant in space and piecewise constant in time.\n\nThe value during the time interval [tᵢ,tᵢ₊₁] is dataᵢ, where t₀ is negative infinity and the last time point+1 is positive infinity.\n\n\n\n\n\n","category":"type"},{"location":"api-reference/models/#Thunderbolt.evaluate_coefficient","page":"Models","title":"Thunderbolt.evaluate_coefficient","text":"\n\n\n\n","category":"function"},{"location":"api-reference/models/#Microstructure","page":"Models","title":"Microstructure","text":"","category":"section"},{"location":"api-reference/models/","page":"Models","title":"Models","text":"AnisotropicPlanarMicrostructureModel\nOrthotropicMicrostructureModel\ncreate_simple_microstructure_model\nThunderbolt.streeter_type_fsn","category":"page"},{"location":"api-reference/models/#Thunderbolt.create_simple_microstructure_model","page":"Models","title":"Thunderbolt.create_simple_microstructure_model","text":"create_simple_microstructure_model(coordinate_system, ip_component::Interpolation{ref_shape}, ip_geo; endo_helix_angle = deg2rad(80.0), epi_helix_angle = deg2rad(-65.0), endo_transversal_angle = 0.0, epi_transversal_angle = 0.0, sheetlet_angle = 0.0) where {dim}\n\nCreate a rotating fiber field by deducing the circumferential direction from apicobasal and transmural gradients.\n\n!!! note Sheetlet angle construction is broken (i.e. does not preserve input angle). FIXME!\n\n\n\n\n\n","category":"function"},{"location":"api-reference/models/#Boundary-Conditions","page":"Models","title":"Boundary Conditions","text":"","category":"section"},{"location":"api-reference/models/","page":"Models","title":"Models","text":"RobinBC\nNormalSpringBC\nBendingSpringBC\nConstantPressureBC\nPressureFieldBC","category":"page"},{"location":"api-reference/models/#Thunderbolt.RobinBC","page":"Models","title":"Thunderbolt.RobinBC","text":"RobinBC\n\nbmP(bmu) cdot bmn_0 = - alpha bmu quad textbfx in partial Omega\n\n\n\n\n\n","category":"type"},{"location":"api-reference/models/#Solid-Mechanics","page":"Models","title":"Solid Mechanics","text":"","category":"section"},{"location":"api-reference/models/","page":"Models","title":"Models","text":"StructuralModel\nExtendedHillModel\nGeneralizedHillModel\nActiveStressModel","category":"page"},{"location":"api-reference/models/#Thunderbolt.ExtendedHillModel","page":"Models","title":"Thunderbolt.ExtendedHillModel","text":"@TODO citation\n\n\n\n\n\n","category":"type"},{"location":"api-reference/models/#Thunderbolt.GeneralizedHillModel","page":"Models","title":"Thunderbolt.GeneralizedHillModel","text":"@TODO citation\n\n\n\n\n\n","category":"type"},{"location":"api-reference/models/#Thunderbolt.ActiveStressModel","page":"Models","title":"Thunderbolt.ActiveStressModel","text":"\n\n\n\n","category":"type"},{"location":"api-reference/models/#Passive-Energies","page":"Models","title":"Passive Energies","text":"","category":"section"},{"location":"api-reference/models/","page":"Models","title":"Models","text":"NullEnergyModel\nLinearSpringModel\nTransverseIsotopicNeoHookeanModel\nHolzapfelOgden2009Model\nLinYinPassiveModel\nLinYinActiveModel\nHumphreyStrumpfYinModel\nGuccione1991PassiveModel\nThunderbolt.BioNeoHooekean","category":"page"},{"location":"api-reference/models/#Thunderbolt.LinYinPassiveModel","page":"Models","title":"Thunderbolt.LinYinPassiveModel","text":"\n\n\n\n","category":"type"},{"location":"api-reference/models/#Thunderbolt.Guccione1991PassiveModel","page":"Models","title":"Thunderbolt.Guccione1991PassiveModel","text":"Parameterization from Vallespin 2023 paper.\n\nTODO citations\n\n\n\n\n\n","category":"type"},{"location":"api-reference/models/#Thunderbolt.BioNeoHooekean","page":"Models","title":"Thunderbolt.BioNeoHooekean","text":"\n\n\n\n","category":"type"},{"location":"api-reference/models/#Active-Energies","page":"Models","title":"Active Energies","text":"","category":"section"},{"location":"api-reference/models/","page":"Models","title":"Models","text":"SimpleActiveSpring\nActiveMaterialAdapter","category":"page"},{"location":"api-reference/models/#Thunderbolt.ActiveMaterialAdapter","page":"Models","title":"Thunderbolt.ActiveMaterialAdapter","text":"\n\n\n\n","category":"type"},{"location":"api-reference/models/#Active-Deformation-Gradients","page":"Models","title":"Active Deformation Gradients","text":"","category":"section"},{"location":"api-reference/models/","page":"Models","title":"Models","text":"GMKActiveDeformationGradientModel\nRLRSQActiveDeformationGradientModel","category":"page"},{"location":"api-reference/models/#Thunderbolt.GMKActiveDeformationGradientModel","page":"Models","title":"Thunderbolt.GMKActiveDeformationGradientModel","text":"@TODO citation original GMK paper\n\n\n\n\n\n","category":"type"},{"location":"api-reference/models/#Thunderbolt.RLRSQActiveDeformationGradientModel","page":"Models","title":"Thunderbolt.RLRSQActiveDeformationGradientModel","text":"@TODO citation 10.1016/j.euromechsol.2013.10.009\n\n\n\n\n\n","category":"type"},{"location":"api-reference/models/#Active-Stresses","page":"Models","title":"Active Stresses","text":"","category":"section"},{"location":"api-reference/models/","page":"Models","title":"Models","text":"SimpleActiveStress\nPiersantiActiveStress\nGuccione1993ActiveModel","category":"page"},{"location":"api-reference/models/#Compression","page":"Models","title":"Compression","text":"","category":"section"},{"location":"api-reference/models/","page":"Models","title":"Models","text":"NullCompressionPenalty\nSimpleCompressionPenalty\nNeffCompressionPenalty","category":"page"},{"location":"api-reference/models/#Electrophysiology","page":"Models","title":"Electrophysiology","text":"","category":"section"},{"location":"api-reference/models/","page":"Models","title":"Models","text":"MonodomainModel\nParabolicParabolicBidomainModel\nParabolicEllipticBidomainModel\nReactionDiffusionSplit","category":"page"},{"location":"api-reference/models/#Thunderbolt.MonodomainModel","page":"Models","title":"Thunderbolt.MonodomainModel","text":"Simplification of the bidomain model with the structure\n\nχCₘ∂ₜφₘ = ∇⋅κ∇φₘ + χ(Iᵢₒₙ(φₘ,𝐬) + Iₛₜᵢₘ(t))     ∂ₜ𝐬  = g(φₘ,𝐬)\n\n(TODO citation). Can be derived through the assumption (TODO), but also when the assumption is violated we can construct optimal κ (TODO citation+example) for the reconstruction of φₘ.\n\n\n\n\n\n","category":"type"},{"location":"api-reference/models/#Thunderbolt.ParabolicParabolicBidomainModel","page":"Models","title":"Thunderbolt.ParabolicParabolicBidomainModel","text":"The original model formulation (TODO citation) with the structure\n\nχCₘ∂ₜφₘ = ∇⋅κᵢ∇φᵢ + χ(Iᵢₒₙ(φₘ,𝐬,x) + Iₛₜᵢₘ,ᵢ(x,t))  χCₘ∂ₜφₘ = ∇⋅κₑ∇φₑ - χ(Iᵢₒₙ(φₘ,𝐬,x) + Iₛₜᵢₘ,ₑ(x,t))     ∂ₜ𝐬  = g(φₘ,𝐬,x)  φᵢ - φₑ = φₘ\n\nTODO implement\n\n\n\n\n\n","category":"type"},{"location":"api-reference/models/#Thunderbolt.ParabolicEllipticBidomainModel","page":"Models","title":"Thunderbolt.ParabolicEllipticBidomainModel","text":"Transformed bidomain model with the structure\n\nχCₘ∂ₜφₘ = ∇⋅κᵢ∇φₘ + ∇⋅κᵢ∇φₑ      + χ(Iᵢₒₙ(φₘ,𝐬,x) + Iₛₜᵢₘ(x,t))       0  = ∇⋅κᵢ∇φₘ + ∇⋅(κᵢ+κₑ)∇φₑ +  Iₛₜᵢₘ,ₑ(t) - Iₛₜᵢₘ,ᵢ(t)     ∂ₜ𝐬  = g(φₘ,𝐬,x)       φᵢ = φₘ + φₑ\n\nThis formulation is a transformation of the parabolic-parabolic form (c.f. TODO citation) and has been derived by (TODO citation) first.\n\nTODO implement\n\n\n\n\n\n","category":"type"},{"location":"api-reference/models/#Thunderbolt.ReactionDiffusionSplit","page":"Models","title":"Thunderbolt.ReactionDiffusionSplit","text":"ReactionDiffusionSplit{MODEL}\n\nAnnotation for the classical reaction-diffusion split of a given model.\n\n\n\n\n\n","category":"type"},{"location":"api-reference/models/","page":"Models","title":"Models","text":"NoStimulationProtocol\nTransmembraneStimulationProtocol\nAnalyticalTransmembraneStimulationProtocol","category":"page"},{"location":"api-reference/models/#Thunderbolt.TransmembraneStimulationProtocol","page":"Models","title":"Thunderbolt.TransmembraneStimulationProtocol","text":"Assumtion: Iₛₜᵢₘ,ₑ = Iₛₜᵢₘ,ᵢ.\n\n\n\n\n\n","category":"type"},{"location":"api-reference/models/#Cells","page":"Models","title":"Cells","text":"","category":"section"},{"location":"api-reference/models/","page":"Models","title":"Models","text":"warning: Warning\nThese are intended to be replaced by ModelingToolkit analogues!","category":"page"},{"location":"api-reference/models/","page":"Models","title":"Models","text":"Thunderbolt.ParametrizedFHNModel\nThunderbolt.ParametrizedPCG2019Model","category":"page"},{"location":"api-reference/models/#Fluid-Mechanics","page":"Models","title":"Fluid Mechanics","text":"","category":"section"},{"location":"api-reference/models/#Lumped-Models","page":"Models","title":"Lumped Models","text":"","category":"section"},{"location":"api-reference/models/","page":"Models","title":"Models","text":"ReggazoniSalvadorAfricaLumpedCicuitModel","category":"page"},{"location":"api-reference/models/#Thunderbolt.ReggazoniSalvadorAfricaLumpedCicuitModel","page":"Models","title":"Thunderbolt.ReggazoniSalvadorAfricaLumpedCicuitModel","text":"ReggazoniSalvadorAfricaLumpedCicuitModel\n\n@TODO citation of \"A cardiac electromechanical model coupled with a lumped-parameter model for closed-loop blood circulation\"\n\n\n\n\n\n","category":"type"},{"location":"api-reference/models/#Multiphysics","page":"Models","title":"Multiphysics","text":"","category":"section"},{"location":"api-reference/models/#Interface","page":"Models","title":"Interface","text":"","category":"section"},{"location":"api-reference/models/","page":"Models","title":"Models","text":"Thunderbolt.InterfaceCoupler\nThunderbolt.VolumeCoupler\nCoupling\nCoupledModel","category":"page"},{"location":"api-reference/models/#FSI","page":"Models","title":"FSI","text":"","category":"section"},{"location":"api-reference/models/","page":"Models","title":"Models","text":"LumpedFluidSolidCoupler\nHirschvogel2016SurrogateVolume\nReggazoniSalvadorAfrica2022SurrogateVolume\nReggazoniSalvadorAfricaSplit","category":"page"},{"location":"api-reference/models/#Thunderbolt.LumpedFluidSolidCoupler","page":"Models","title":"Thunderbolt.LumpedFluidSolidCoupler","text":"LumpedFluidSolidCoupler\n\nEnforce the constraints that   chamber volume 3D (solid model) = chamber volume 0D (lumped circuit) where a surface pressure integral is introduced such that   ∫  ∂Ωendo Here chamber_volume_method is responsible to compute the 3D volume.\n\n\n\n\n\n","category":"type"},{"location":"api-reference/models/#Thunderbolt.Hirschvogel2016SurrogateVolume","page":"Models","title":"Thunderbolt.Hirschvogel2016SurrogateVolume","text":"Hirschvogel2016SurrogateVolume\n\nCompute the chamber volume as a surface integral via the integral\n\n∫ (x + d) det(F) adj(F) N ∂Ωendo\n\nwhere it is assumed that the chamber is convex, zero displacement in  apicobasal direction at the valvular plane occurs and the plane normal is aligned with the z axis, where the origin is at z=0.\n\n\n\n\n\n","category":"type"},{"location":"api-reference/models/#Thunderbolt.ReggazoniSalvadorAfrica2022SurrogateVolume","page":"Models","title":"Thunderbolt.ReggazoniSalvadorAfrica2022SurrogateVolume","text":"ReggazoniSalvadorAfrica2022SurrogateVolume\n\nCompute the chamber volume as a surface integral via the integral   -∫ det(F) ((h ⊗ h)(x + d - b)) adj(F) N ∂Ωendo\n\nNote that the integral basically measures the volume via displacement on a given axis.\n\n\n\n\n\n","category":"type"},{"location":"api-reference/models/#Thunderbolt.ReggazoniSalvadorAfricaSplit","page":"Models","title":"Thunderbolt.ReggazoniSalvadorAfricaSplit","text":"ReggazoniSalvadorAfricaSplit{MODEL}\n\nAnnotation for the split described in the 2022 paper.\n\n\n\n\n\n","category":"type"},{"location":"topics/couplers/#Couplers","page":"Couplers","title":"Couplers","text":"","category":"section"},{"location":"topics/couplers/","page":"Couplers","title":"Couplers","text":"Many multiphysics problems can be described by having individual physics + coupling terms. Couplers act as the abstraction layer to describe these terms.","category":"page"},{"location":"topics/couplers/","page":"Couplers","title":"Couplers","text":"More detailed information coming soon...","category":"page"},{"location":"tutorials/#Tutorials-Overview","page":"Overview","title":"Tutorials Overview","text":"","category":"section"},{"location":"tutorials/","page":"Overview","title":"Overview","text":"Coming soon...","category":"page"},{"location":"api-reference/mesh/","page":"Mesh","title":"Mesh","text":"DocTestSetup = :(using Thunderbolt)","category":"page"},{"location":"api-reference/mesh/#Mesh","page":"Mesh","title":"Mesh","text":"","category":"section"},{"location":"api-reference/mesh/","page":"Mesh","title":"Mesh","text":"Thunderbolt.SimpleMesh2D\nThunderbolt.SimpleMesh3D\nThunderbolt.to_mesh\nThunderbolt.elementtypes","category":"page"},{"location":"api-reference/mesh/#Thunderbolt.SimpleMesh2D","page":"Mesh","title":"Thunderbolt.SimpleMesh2D","text":"SimpleMesh2D{C <: AbstractCell, T <: Real} <: AbstractGrid{2}\n\nA grid which also has information abouts its vertices, faces and edges.\n\n\n\n\n\n","category":"type"},{"location":"api-reference/mesh/#Thunderbolt.SimpleMesh3D","page":"Mesh","title":"Thunderbolt.SimpleMesh3D","text":"SimpleMesh3D{C <: AbstractCell, T <: Real} <: AbstractGrid{3}\n\nA grid which also has information abouts its vertices, faces and edges.\n\n\n\n\n\n","category":"type"},{"location":"api-reference/mesh/#Coordinate-Systems","page":"Mesh","title":"Coordinate Systems","text":"","category":"section"},{"location":"api-reference/mesh/","page":"Mesh","title":"Mesh","text":"Thunderbolt.CartesianCoordinateSystem\nThunderbolt.LVCoordinateSystem","category":"page"},{"location":"api-reference/mesh/#Thunderbolt.LVCoordinateSystem","page":"Mesh","title":"Thunderbolt.LVCoordinateSystem","text":"Simple Coordinate System.\n\n!!! note TODO implement circumferential coordinate\n\n\n\n\n\n","category":"type"},{"location":"api-reference/mesh/#Mesh-Generators","page":"Mesh","title":"Mesh Generators","text":"","category":"section"},{"location":"api-reference/mesh/","page":"Mesh","title":"Mesh","text":"generate_mesh\ngenerate_ring_mesh\ngenerate_quadratic_ring_mesh\ngenerate_ideal_lv_mesh","category":"page"},{"location":"api-reference/mesh/#Thunderbolt.generate_ring_mesh","page":"Mesh","title":"Thunderbolt.generate_ring_mesh","text":"generate_ring_mesh(num_elements_circumferential::Int, num_elements_radial::Int, num_elements_logintudinal::Int; inner_radius::T = Float64(0.75), outer_radius::T = Float64(1.0), longitudinal_lower::T = Float64(-0.2), longitudinal_upper::T = Float64(0.2), apicobasal_tilt::T=Float64(0.0)) where {T}\n\nGenerates an idealized full-hexahedral ring with linear ansatz. Geometrically it is the substraction of a small cylinder C_i of a large cylinder C_o. The number of elements for the cylindrical system can be controlled by the first three input parameters. The remaining parameters control the spatial dimensions and the ring shape.\n\n\n\n\n\n","category":"function"},{"location":"api-reference/mesh/#Thunderbolt.generate_quadratic_ring_mesh","page":"Mesh","title":"Thunderbolt.generate_quadratic_ring_mesh","text":"generate_quadratic_ring_mesh(num_elements_circumferential::Int, num_elements_radial::Int, num_elements_logintudinal::Int; inner_radius::T = Float64(0.75), outer_radius::T = Float64(1.0), longitudinal_lower::T = Float64(-0.2), longitudinal_upper::T = Float64(0.2), apicobasal_tilt::T=Float64(0.0)) where {T}\n\nGenerates an idealized full-hexahedral ring with quadratic ansatz. Geometrically it is the substraction of a small cylinder C_i of a large cylinder C_o. The number of elements for the cylindrical system can be controlled by the first three input parameters. The remaining parameters control the spatial dimensions and the ring shape.\n\n\n\n\n\n","category":"function"},{"location":"api-reference/mesh/#Thunderbolt.generate_ideal_lv_mesh","page":"Mesh","title":"Thunderbolt.generate_ideal_lv_mesh","text":"generate_ideal_lv_mesh(num_elements_circumferential::Int, num_elements_radial::Int, num_elements_logintudinally::Int; inner_chamber_radius = 0.7, outer_wall_radius = 1.0, longitudinal_cutoff_lower::T = Float64(-1.0), longitudinal_cutoff_upper::T = Float64(0.2), longitudinal_stretch::T = Float64(1.2))\n\nGenerate an idealized left ventricle as a truncated ellipsoid. The number of elements per axis are controlled by the first three parameters.\n\n\n\n\n\n","category":"function"},{"location":"api-reference/mesh/#Utility","page":"Mesh","title":"Utility","text":"","category":"section"},{"location":"api-reference/mesh/","page":"Mesh","title":"Mesh","text":"Thunderbolt.hexahedralize\nThunderbolt.uniform_refinement\nload_carp_mesh\nload_voom2_mesh\nload_mfem_mesh","category":"page"},{"location":"api-reference/mesh/#Thunderbolt.load_carp_mesh","page":"Mesh","title":"Thunderbolt.load_carp_mesh","text":"load_carp_mesh(filename)\n\nMesh format taken from https://carp.medunigraz.at/file_formats.html .\n\n\n\n\n\n","category":"function"},{"location":"api-reference/mesh/#Thunderbolt.load_voom2_mesh","page":"Mesh","title":"Thunderbolt.load_voom2_mesh","text":"load_voom2_mesh(filename)\n\nLoader for the voom2 legacy format.\n\n\n\n\n\n","category":"function"},{"location":"api-reference/mesh/#Thunderbolt.load_mfem_mesh","page":"Mesh","title":"Thunderbolt.load_mfem_mesh","text":"load_mfem_mesh(filename)\n\nLoader for straight mfem meshes supporting v1.0.\n\n\n\n\n\n","category":"function"},{"location":"topics/operators/#Operators","page":"Operators","title":"Operators","text":"","category":"section"},{"location":"topics/operators/","page":"Operators","title":"Operators","text":"Operators act as the translation layer between discretized problems and solvers by abstracting \"functions of functions\".","category":"page"},{"location":"topics/operators/","page":"Operators","title":"Operators","text":"Many multiphysics problems can be efficiently described as blocked problems, which gives rise to the concept of blocked operators by partitioning the input of the function into multiple ones.","category":"page"},{"location":"topics/operators/","page":"Operators","title":"Operators","text":"More detailed information coming soon...","category":"page"},{"location":"devdocs/DifferentialEquationsjl-issue/#Brain-flush-about-relevant-design-decisions","page":"Brain flush about relevant design decisions","title":"Brain flush about relevant design decisions","text":"","category":"section"},{"location":"devdocs/DifferentialEquationsjl-issue/","page":"Brain flush about relevant design decisions","title":"Brain flush about relevant design decisions","text":"https://github.com/SciML/DifferentialEquations.jl/issues/997","category":"page"},{"location":"devdocs/DifferentialEquationsjl-issue/","page":"Brain flush about relevant design decisions","title":"Brain flush about relevant design decisions","text":"My personal roadmap is to publish Thunderbolt.jl soon, which is a multiphysics framework which tries to be close to the design of the libraries in the DifferentialEquations.jl ecosystem, and to upstream relevant parts (after cleaning up and settling the design). ","category":"page"},{"location":"devdocs/DifferentialEquationsjl-issue/","page":"Brain flush about relevant design decisions","title":"Brain flush about relevant design decisions","text":"In Thunderbolt.jl I approach the outlined problems as follows (in the spoiler because likely not relevant for most readers). I put it here to see what problems come if we follow one approach deeper into the PDE rabbit hole (multiphysics/coupled problems). I hope that we can learn something about the interface design from this description.","category":"page"},{"location":"devdocs/DifferentialEquationsjl-issue/","page":"Brain flush about relevant design decisions","title":"Brain flush about relevant design decisions","text":"1,2,3,5 I do not have a clear separation between the hypothetic PDEFunction and the PDEProblem, because I could not figure out how to untie them in a modular and generic fashion, yet. Instead I have a granular distinction between the different types of PDE problems which I encounter (CoupledProblem, SplitProblem, ParitionedProblem,PointwiseProblem,QuasiStaticNonlinearProblem,QuasiStaticDAEProblem...). I ended up here because I am not sure what the distinguishing property between the problems should be (in contrast to ODE/SDE/...-Problems, where it is immediately clear).","category":"page"},{"location":"devdocs/DifferentialEquationsjl-issue/","page":"Brain flush about relevant design decisions","title":"Brain flush about relevant design decisions","text":"4,7 When constructing the problem from some model the discrete mesh (with some coordinate system), a discretization technique and boundary condition information is passed. This way the problem can cache the boundary condition information for a specific discretization and it also directly has the solution vector sizes (+meta information about the degrees of freedom). This way I can only handle a limited number of methods from class B (partitioned, basically method of lines) above and technically it should be possible to provide support for A (not touched this one yet).","category":"page"},{"location":"devdocs/DifferentialEquationsjl-issue/","page":"Brain flush about relevant design decisions","title":"Brain flush about relevant design decisions","text":"6 Solvers are defined per problem, as in the SciML ecosystem. However, this does not feel like the best choice due to the fine granularity of the problems described above. Basically when constructing the solvers I am constructing a sequence of operators, such that I get discrete (Non)linearFunctions of the form f(ut) plus caches for evaluating f, as well as caches for the inner solvers (e.g. \"NewtonRaphsonCache\", which is very similar to NonlinearSolve.jl . The operator is probably closest to a PDEFunction. However, I can not find a way to hoist the operator construction directly into the *Problems yet, because different solvers might need different operators. I think we can do the hoisting and I just had not enough time to figure out how to do it properly in the data structures.","category":"page"},{"location":"devdocs/DifferentialEquationsjl-issue/","page":"Brain flush about relevant design decisions","title":"Brain flush about relevant design decisions","text":"8 Kinda of a blocker for releasing my package public. I am currently basically poking around in the solver caches with dispatches. Since I want to interface against the SciML ecosystem in the long term anyway I have not bothered investing time. But I have something analogue to the TimeChoiceIterator in mind. I should note here that it is usually impossible to store the the full space-time solution in RAM (in contrast to e.g. pure small ODE problems). It should be just made clear that evaluating u(xt) is possible, but quite costly and comes with inaccurracies if the mesh is nonlinear (because we basically have to find where to evaluate, which usually involves solving a nonlinear problem). It should also be considered that many problems involve more than one field (e.g. \"heat and mechanics\" fields), hence we also need some way to distinguish between fields in the iterator.","category":"page"},{"location":"devdocs/DifferentialEquationsjl-issue/","page":"Brain flush about relevant design decisions","title":"Brain flush about relevant design decisions","text":"I have not given much details on the caching infrastructure since I am currently reworking it (and I honestly do not think that in depth detail here really will help with the problems). But the idea is similar to what is done in any package in the DifferentialEquations.jl ecosystem. Solvers construct caches and use them to control dispatches. ","category":"page"},{"location":"devdocs/DifferentialEquationsjl-issue/","page":"Brain flush about relevant design decisions","title":"Brain flush about relevant design decisions","text":"The obvious problem with my approach is that we do not clearly separate between modeling and solver. Yes, it allows that the model structure can be easier utilized, but I think we should be able to get an interface with a clearer separation and better reusability of individual components.","category":"page"},{"location":"howto/#How-to-Guides-Overview","page":"Overview","title":"How-to Guides Overview","text":"","category":"section"},{"location":"howto/","page":"Overview","title":"Overview","text":"This page gives an overview of the how-to guides. How-to guides address various common tasks one might want to do in a cardiac multiphysics simuation. Many of the guides are extensions, or build on top of, the tutorials and, therefore,  some familiarity with Thunderbolt is assumed.","category":"page"},{"location":"howto/","page":"Overview","title":"Overview","text":"","category":"page"},{"location":"howto/#[Benchmarking](benchmarking.md)","page":"Overview","title":"Benchmarking","text":"","category":"section"},{"location":"howto/","page":"Overview","title":"Overview","text":"This guide shows how we can understand which parts of the simulation how to get information about where time and memory is spent.","category":"page"},{"location":"howto/","page":"Overview","title":"Overview","text":"","category":"page"},{"location":"howto/","page":"Overview","title":"Overview","text":"More coming soon...","category":"page"},{"location":"api-reference/solver/","page":"Solver","title":"Solver","text":"DocTestSetup = :(using Thunderbolt)","category":"page"},{"location":"api-reference/solver/#Solver","page":"Solver","title":"Solver","text":"","category":"section"},{"location":"api-reference/solver/","page":"Solver","title":"Solver","text":"BackwardEulerSolver\nForwardEulerSolver\nForwardEulerCellSolver\nThunderbolt.AdaptiveForwardEulerReactionSubCellSolver\nThunderbolt.ThreadedForwardEulerCellSolver\nLTGOSSolver\nLoadDrivenSolver\nNewtonRaphsonSolver\nsolve","category":"page"},{"location":"api-reference/solver/#Thunderbolt.LTGOSSolver","page":"Solver","title":"Thunderbolt.LTGOSSolver","text":"LTGOSSolver\n\nClassical Lie-Trotter-Godunov operator splitting in time.\n\n\n\n\n\n","category":"type"},{"location":"api-reference/solver/#Thunderbolt.LoadDrivenSolver","page":"Solver","title":"Thunderbolt.LoadDrivenSolver","text":"LoadDrivenSolver{IS, T, PFUN}\n\nSolve the nonlinear problem F(u,t)=0 with given time increments Δton some interval [t_begin, t_end] where t is some pseudo-time parameter.\n\n\n\n\n\n","category":"type"},{"location":"api-reference/solver/#Thunderbolt.NewtonRaphsonSolver","page":"Solver","title":"Thunderbolt.NewtonRaphsonSolver","text":"NewtonRaphsonSolver{T}\n\nClassical Newton-Raphson solver to solve nonlinear problems of the form F(u) = 0. To use the Newton-Raphson solver you have to dispatch on\n\nupdate_linearization!\n\n\n\n\n\n","category":"type"},{"location":"api-reference/solver/#Thunderbolt.solve","page":"Solver","title":"Thunderbolt.solve","text":"solve(problem, solver, Δt, time_span, initial_condition, [callback])\n\nMain entry point for solvers in Thunderbolt.jl. The design is inspired by DifferentialEquations.jl. We try to upstream as much content as possible to make it available for packages.\n\nTODO iterator syntax\n\n\n\n\n\n","category":"function"},{"location":"api-reference/operators/","page":"Operators","title":"Operators","text":"DocTestSetup = :(using Thunderbolt)","category":"page"},{"location":"api-reference/operators/#Operators","page":"Operators","title":"Operators","text":"","category":"section"},{"location":"api-reference/operators/","page":"Operators","title":"Operators","text":"BlockOperator\nThunderbolt.AbstractNonlinearOperator\nThunderbolt.AbstractBilinearOperator\nThunderbolt.AbstractLinearOperator\nAssembledNonlinearOperator\nAssembledBilinearOperator\nDiagonalOperator\nNullOperator\nLinearNullOperator\nLinearOperator","category":"page"},{"location":"api-reference/operators/#Thunderbolt.AbstractNonlinearOperator","page":"Operators","title":"Thunderbolt.AbstractNonlinearOperator","text":"AbstractNonlinearOperator\n\nModels of a nonlinear function F(u).\n\nInterface:     (op::AbstractNonlinearOperator)(residual::AbstractVector, in::AbstractNonlinearOperator)     eltype()     size()\n\n# linearization\nmul!(out, op::AbstractNonlinearOperator, in)\nmul!(out, op::AbstractNonlinearOperator, in, α, β)\nupdate_linearization!(op::AbstractNonlinearOperator, u::AbstractVector, time)\nupdate_linearization!(op::AbstractNonlinearOperator, u::AbstractVector, residual::AbstractVector, time)\n\n\n\n\n\n","category":"type"},{"location":"api-reference/#API-Reference-Overview","page":"Overview","title":"API Reference Overview","text":"","category":"section"},{"location":"api-reference/","page":"Overview","title":"Overview","text":"Pages = [\n    \"models.md\",\n    \"mesh.md\",\n    \"discretization.md\",\n    \"operators.md\",\n    \"solver.md\",\n    \"utility.md\",\n]","category":"page"},{"location":"topics/#Topic-Guide-Overview","page":"Overview","title":"Topic Guide Overview","text":"","category":"section"},{"location":"topics/","page":"Overview","title":"Overview","text":"Coming soon...","category":"page"},{"location":"api-reference/utility/","page":"Utility","title":"Utility","text":"DocTestSetup = :(using Thunderbolt)","category":"page"},{"location":"api-reference/utility/#Utility","page":"Utility","title":"Utility","text":"","category":"section"},{"location":"api-reference/utility/#Collections","page":"Utility","title":"Collections","text":"","category":"section"},{"location":"api-reference/utility/","page":"Utility","title":"Utility","text":"Thunderbolt.InterpolationCollection\ngetinterpolation\nThunderbolt.ScalarInterpolationCollection\nThunderbolt.VectorInterpolationCollection\nThunderbolt.VectorizedInterpolationCollection\nLagrangeCollection\nQuadratureRuleCollection\ngetquadraturerule\nCellValueCollection\nFaceValueCollection","category":"page"},{"location":"api-reference/utility/#Thunderbolt.InterpolationCollection","page":"Utility","title":"Thunderbolt.InterpolationCollection","text":"InterpolationCollection\n\nA collection of compatible interpolations over some (possilby different) cells.\n\n\n\n\n\n","category":"type"},{"location":"api-reference/utility/#Thunderbolt.ScalarInterpolationCollection","page":"Utility","title":"Thunderbolt.ScalarInterpolationCollection","text":"ScalarInterpolationCollection\n\nA collection of compatible scalar-valued interpolations over some (possilby different) cells.\n\n\n\n\n\n","category":"type"},{"location":"api-reference/utility/#Thunderbolt.VectorInterpolationCollection","page":"Utility","title":"Thunderbolt.VectorInterpolationCollection","text":"VectorInterpolationCollection\n\nA collection of compatible vector-valued interpolations over some (possilby different) cells.\n\n\n\n\n\n","category":"type"},{"location":"api-reference/utility/#Thunderbolt.VectorizedInterpolationCollection","page":"Utility","title":"Thunderbolt.VectorizedInterpolationCollection","text":"VectorizedInterpolationCollection{order} <: InterpolationCollection\n\nA collection of fixed-order vectorized Lagrange interpolations across different cell types.\n\n\n\n\n\n","category":"type"},{"location":"api-reference/utility/#Thunderbolt.LagrangeCollection","page":"Utility","title":"Thunderbolt.LagrangeCollection","text":"LagrangeCollection{order} <: InterpolationCollection\n\nA collection of fixed-order Lagrange interpolations across different cell types.\n\n\n\n\n\n","category":"type"},{"location":"api-reference/utility/#Thunderbolt.QuadratureRuleCollection","page":"Utility","title":"Thunderbolt.QuadratureRuleCollection","text":"QuadratureRuleCollection\n\nA collection of quadrature rules across different cell types.\n\n\n\n\n\n","category":"type"},{"location":"api-reference/utility/#Thunderbolt.CellValueCollection","page":"Utility","title":"Thunderbolt.CellValueCollection","text":"CellValueCollection\n\nHelper to construct and query the correct cell values on mixed grids.\n\n\n\n\n\n","category":"type"},{"location":"api-reference/utility/#Thunderbolt.FaceValueCollection","page":"Utility","title":"Thunderbolt.FaceValueCollection","text":"FaceValueCollection\n\nHelper to construct and query the correct face values on mixed grids.\n\n\n\n\n\n","category":"type"},{"location":"api-reference/utility/#Iteration","page":"Utility","title":"Iteration","text":"","category":"section"},{"location":"api-reference/utility/","page":"Utility","title":"Utility","text":"QuadraturePoint\nQuadratureIterator","category":"page"},{"location":"api-reference/utility/#Thunderbolt.QuadraturePoint","page":"Utility","title":"Thunderbolt.QuadraturePoint","text":"QuadraturePoint{dim, T}\n\nA simple helper to carry quadrature point information.\n\n\n\n\n\n","category":"type"},{"location":"api-reference/utility/#Thunderbolt.QuadratureIterator","page":"Utility","title":"Thunderbolt.QuadratureIterator","text":"QuadratureIterator(::QuadratureRule)\nQuadratureIterator(::FaceQuadratureRule, local_face_idx::Int)\nQuadratureIterator(::CellValues)\nQuadratureIterator(::FaceValues)\n\nA helper to loop over the quadrature points in some rule or cache with type QuadraturePoint.\n\n\n\n\n\n","category":"type"},{"location":"api-reference/utility/","page":"Utility","title":"Utility","text":"TODO TimeChoiceIterator https://github.com/termi-official/Thunderbolt.jl/issues/32","category":"page"},{"location":"api-reference/utility/#IO","page":"Utility","title":"IO","text":"","category":"section"},{"location":"api-reference/utility/","page":"Utility","title":"Utility","text":"ParaViewWriter\nJLD2Writer\nstore_timestep!\nstore_timestep_celldata!\nstore_timestep_field!\nstore_coefficient!\nstore_green_lagrange!\nfinalize_timestep!\nfinalize!","category":"page"},{"location":"api-reference/utility/#Thunderbolt.ParaViewWriter","page":"Utility","title":"Thunderbolt.ParaViewWriter","text":"\n\n\n\n","category":"type"},{"location":"api-reference/utility/#Thunderbolt.JLD2Writer","page":"Utility","title":"Thunderbolt.JLD2Writer","text":"\n\n\n\n","category":"type"},{"location":"api-reference/utility/#Postprocessing","page":"Utility","title":"Postprocessing","text":"","category":"section"},{"location":"api-reference/utility/#ECG","page":"Utility","title":"ECG","text":"","category":"section"},{"location":"api-reference/utility/","page":"Utility","title":"Utility","text":"Thunderbolt.Plonsey1964ECGGaussCache\nThunderbolt.evaluate_ecg","category":"page"},{"location":"api-reference/utility/#Thunderbolt.Plonsey1964ECGGaussCache","page":"Utility","title":"Thunderbolt.Plonsey1964ECGGaussCache","text":"Plonsey1964ECGGaussCache(problem, op, φₘ)\n\nHere φₘ is the solution vector containing the transmembranepotential, op is the associated diffusion opeartor and  κₜ is the torso's conductivity.\n\nReturns a cache to compute the lead field with the form proposed in [1] with the Gauss theorem applied to it, as for example described in [2]. Calling evaluate_ecg with this method simply evaluates the following integral efficiently:\n\nvarphi_e(x)=frac14 pi kappa_t int_Omega frac kappa_ φₘ cdot (tildex-x)(tildex-x)^3mathrmdtildex\n\nThe important simplifications taken are:\n\nSurrounding volume is an infinite, homogeneous sphere with isotropic conductivity\nThe extracellular space and surrounding volume share the same isotropic, homogeneous conductivity tensor\n\n\n\n\n\n","category":"type"},{"location":"api-reference/utility/#Thunderbolt.evaluate_ecg","page":"Utility","title":"Thunderbolt.evaluate_ecg","text":"evaluate_ecg(method::Plonsey1964ECGGaussCache, x::Vec, κₜ::Real)\n\nCompute the pseudo ECG at a given point x by evaluating:\n\nvarphi_e(x)=frac14 pi kappa_t int_Omega frac kappa_ φₘ cdot (tildex-x)(tildex-x)^3mathrmdtildex\n\nFor more information please read the docstring for Plonsey1964ECGGaussCache\n\n\n\n\n\n","category":"function"},{"location":"api-reference/problems/","page":"Problems","title":"Problems","text":"DocTestSetup = :(using Thunderbolt)","category":"page"},{"location":"api-reference/problems/#Problems","page":"Problems","title":"Problems","text":"","category":"section"},{"location":"api-reference/problems/","page":"Problems","title":"Problems","text":"Thunderbolt.NullProblem\nThunderbolt.CoupledProblem\nThunderbolt.SplitProblem\nThunderbolt.PartitionedProblem\nThunderbolt.ODEProblem\nThunderbolt.AbstractPointwiseProblem\nThunderbolt.PointwiseODEProblem\nThunderbolt.TransientHeatProblem\nThunderbolt.QuasiStaticNonlinearProblem\nThunderbolt.QuasiStaticODEProblem\nThunderbolt.QuasiStaticDAEProblem","category":"page"},{"location":"api-reference/problems/#Thunderbolt.QuasiStaticNonlinearProblem","page":"Problems","title":"Thunderbolt.QuasiStaticNonlinearProblem","text":"QuasiStaticNonlinearProblem{M <: QuasiStaticModel, DH <: Ferrite.AbstractDofHandler}\n\nA discrete problem with time dependent terms and no time derivatives w.r.t. any solution variable. Abstractly written we want to solve the problem F(u, t) = 0 on some time interval [t₁, t₂].\n\n\n\n\n\n","category":"type"},{"location":"api-reference/problems/#Thunderbolt.QuasiStaticODEProblem","page":"Problems","title":"Thunderbolt.QuasiStaticODEProblem","text":"QuasiStaticODEProblem{M <: QuasiStaticModel, DH <: Ferrite.AbstractDofHandler}\n\nA problem with time dependent terms and time derivatives only w.r.t. internal solution variable.\n\nTODO implement.\n\n\n\n\n\n","category":"type"},{"location":"api-reference/problems/#Thunderbolt.QuasiStaticDAEProblem","page":"Problems","title":"Thunderbolt.QuasiStaticDAEProblem","text":"QuasiStaticDAEProblem{M <: QuasiStaticModel, DH <: Ferrite.AbstractDofHandler}\n\nA problem with time dependent terms and time derivatives only w.r.t. internal solution variable which can't be expressed as an ODE.\n\nTODO implement.\n\n\n\n\n\n","category":"type"},{"location":"","page":"Home","title":"Home","text":"DocTestSetup = :(using Thunderbolt)","category":"page"},{"location":"#Thunderbolt.jl","page":"Home","title":"Thunderbolt.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"A high performance cardiac multiphysics system written in Julia","category":"page"},{"location":"","page":"Home","title":"Home","text":"Welcome to the documentation for Thunderbolt. The main goal of this project is to provide a single framework where we can develop new models and high  performance parallel solvers.","category":"page"},{"location":"","page":"Home","title":"Home","text":"warning: Warning\nThis package is under heavy development. Expect regular breaking changes for now. If you are interested in joining development, then either comment an issue or reach out via julialang.zulipchat.com, via mail or via  julialang.slack.com. Alternatively open a discussion if you have something  specific in mind.","category":"page"},{"location":"","page":"Home","title":"Home","text":"note: Note\nIf you are interested in using this package, then I am also happy to to get some constructive feedback, especially if things don't work out in the current design. This can be done via julialang.slack.com, julialang.zulipchat.com or via mail.","category":"page"},{"location":"","page":"Home","title":"Home","text":"note: Note\nIf you use this package in an academic context, then I would be happy if you could cite it. Please also cite additionally the corresponding sources for models, numerical methods and utilities used in your code via this package.","category":"page"},{"location":"#How-the-documentation-is-organized","page":"Home","title":"How the documentation is organized","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"This high level view of the documentation structure will help you find what you are looking for. The document is organized as follows[1]:","category":"page"},{"location":"","page":"Home","title":"Home","text":"Tutorials are thoroughly documented examples which guides you through the process of building and solving cardiac models in Thunderbolt.\nTopic guides contains more in-depth explanations and discussions about multiphysics modeling concepts and their numerical treatment, and specifically how  these are realized in Thunderbolt.\nAPI Reference contains the technical API reference of functions and methods (e.g. the documentation strings).\nHow-to guides will guide you through the steps involved in addressing common tasks and use-cases. These usually build on top of the tutorials and thus assume basic knowledge of how Thunderbolt works.","category":"page"},{"location":"","page":"Home","title":"Home","text":"[1]: The organization of the document follows the Diátaxis Framework.","category":"page"},{"location":"","page":"Home","title":"Home","text":"In addition there is the Developer documentation, for documentation of Ferrite internal code.","category":"page"},{"location":"#Getting-started","page":"Home","title":"Getting started","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"If you are new to the Thunderbolt project, then it is suggested to start with the tutorials section before tackling more complex problems.","category":"page"},{"location":"","page":"Home","title":"Home","text":"More information coming soon...","category":"page"},{"location":"","page":"Home","title":"Home","text":"TODO refer to an example project via DrWatson.jl.","category":"page"},{"location":"#Getting-help","page":"Home","title":"Getting help","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"If you have questions about Thunderbolt it is suggested to use the #Thunderbolt.jl stream on Zulip. Zulip is preferred over Slack, because the discussions are available over longer time periods.","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"To use Thunderbolt you first need to install Julia, see https://julialang.org/ for details. Installing Thunderbolt can then be done from the Pkg REPL; press ] at the julia> promp to enter pkg> mode:","category":"page"},{"location":"","page":"Home","title":"Home","text":"pkg> add Ferrite#master, https://github.com/termi-official/Thunderbolt.jl#main","category":"page"},{"location":"","page":"Home","title":"Home","text":"note: Note\nThe package is under development, which is why you will need the currently (unreleased) 1.0 version of Ferrite.jl and the (unregistered) Thunderbolt.jl package.","category":"page"},{"location":"","page":"Home","title":"Home","text":"This will install Thunderbolt and all necessary dependencies. Press backspace to get back to the julia> prompt. (See the documentation for Pkg, Julia's package manager, for more help regarding package installation and project management.)","category":"page"},{"location":"","page":"Home","title":"Home","text":"Finally, to load Thunderbolt, use","category":"page"},{"location":"","page":"Home","title":"Home","text":"using Thunderbolt","category":"page"},{"location":"","page":"Home","title":"Home","text":"You are now all set to start using Thunderbolt!","category":"page"},{"location":"#Contributing-to-Thunderbolt","page":"Home","title":"Contributing to Thunderbolt","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Thunderbolt is under very active development. If you find a bug, then please open an issue on GitHub with a reproducer. If you are interested in joining development, then either comment an issue or reach out via Zulip, via mail or via  Slack. Alternatively open a discussion if you have something  specific in mind - please just check for open discussion before opening a new one.","category":"page"},{"location":"","page":"Home","title":"Home","text":"A detailed contributor guide is coming soon...","category":"page"},{"location":"api-reference/discretization/","page":"Discretization","title":"Discretization","text":"DocTestSetup = :(using Thunderbolt)","category":"page"},{"location":"api-reference/discretization/#Discretization","page":"Discretization","title":"Discretization","text":"","category":"section"},{"location":"api-reference/discretization/#Interface","page":"Discretization","title":"Interface","text":"","category":"section"},{"location":"api-reference/discretization/","page":"Discretization","title":"Discretization","text":"FiniteElementDiscretization\nThunderbolt.semidiscretize\nThunderbolt.assemble_element!\nThunderbolt.assemble_face!\nThunderbolt.assemble_interface_coupling_contribution!","category":"page"},{"location":"api-reference/discretization/#Thunderbolt.FiniteElementDiscretization","page":"Discretization","title":"Thunderbolt.FiniteElementDiscretization","text":"\n\n\n\n","category":"type"},{"location":"api-reference/discretization/#Thunderbolt.semidiscretize","page":"Discretization","title":"Thunderbolt.semidiscretize","text":"semidiscretize(model, discretization, mesh)\n\nTransform a space-time model into a pure time-dependent problem.\n\n\n\n\n\n","category":"function"},{"location":"api-reference/discretization/#Common","page":"Discretization","title":"Common","text":"","category":"section"},{"location":"api-reference/discretization/","page":"Discretization","title":"Discretization","text":"Thunderbolt.BilinearMassIntegrator\nThunderbolt.BilinearMassElementCache\nThunderbolt.BilinearDiffusionIntegrator\nThunderbolt.BilinearDiffusionElementCache\nThunderbolt.AnalyticalCoefficientElementCache","category":"page"},{"location":"api-reference/discretization/#Thunderbolt.BilinearMassIntegrator","page":"Discretization","title":"Thunderbolt.BilinearMassIntegrator","text":"Represents the integrand of the bilinear form <ϕ,ψ> = ∫ ρϕ ⋅ ψ dΩ .\n\n\n\n\n\n","category":"type"},{"location":"api-reference/discretization/#Thunderbolt.BilinearDiffusionIntegrator","page":"Discretization","title":"Thunderbolt.BilinearDiffusionIntegrator","text":"Represents the integrand of the bilinear form <ϕ,ψ> = -∫ D∇ϕ ⋅ ∇ψ dΩ .\n\n\n\n\n\n","category":"type"},{"location":"api-reference/discretization/#Solid-Mechanics","page":"Discretization","title":"Solid Mechanics","text":"","category":"section"},{"location":"api-reference/discretization/#Elements","page":"Discretization","title":"Elements","text":"","category":"section"},{"location":"api-reference/discretization/","page":"Discretization","title":"Discretization","text":"Thunderbolt.StructuralElementCache\nThunderbolt.SimpleFaceCache","category":"page"}]
}
