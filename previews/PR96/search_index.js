var documenterSearchIndex = {"docs":
[{"location":"references/#References","page":"References","title":"References","text":"","category":"section"},{"location":"references/","page":"References","title":"References","text":"S. Lie. Theorie der Transformationsgruppen I. Mathematische Annalen 16, 441–528 (1880).\n\n\n\nH. F. Trotter. On the Product of Semi-Groups of Operators. Proceedings of the American Mathematical Society 10, 545–551 (1959).\n\n\n\nS. K. Godunov. A difference method for numerical calculation of discontinuous solutions of the equations of hydrodynamics. Matematicheskii Sbornik 89, 271–306 (1959).\n\n\n\nD. D. Streeter Jr, H. M. Spotnitz, D. P. Patel, J. Ross Jr and E. H. Sonnenblick. Fiber orientation in the canine left ventricle during diastole and systole. Circulation research 24, 339–347 (1969).\n\n\n\nD. Ogiermann, D. Balzani and L. E. Perotti. An Extended Generalized Hill Model for Cardiac Tissue: Comparison with Different Approaches Based on Experimental Data. In: Functional Imaging and Modeling of the Heart, edited by O. Bernard, P. Clarysse, N. Duchateau, J. Ohayon and M. Viallon (Cham, 2023); pp. 555–564.\n\n\n\nJ. Stålhand, A. Klarbring and G. A. Holzapfel. Smooth muscle contraction: mechanochemical formulation for homogeneous finite strains. Progress in biophysics and molecular biology 96, 465–481 (2008).\n\n\n\nS. Göktepe, A. Menzel and E. Kuhl. The Generalized Hill Model: A Kinematic Approach towards Active Muscle Contraction. Journal of the Mechanics and Physics of Solids 72, 20–39 (2014).\n\n\n\nJ. M. Guccione, L. K. Waldman and A. D. McCulloch. Mechanics of Active Contraction in Cardiac Muscle: Part II—Cylindrical Models of the Systolic Left Ventricle. Journal of Biomechanical Engineering 115, 82–90 (1993).\n\n\n\nG. A. Holzapfel and R. W. Ogden. Constitutive modelling of passive myocardium: a structurally based framework for material characterization. Philosophical Transactions of the Royal Society A: Mathematical, Physical and Engineering Sciences 367, 3445–3475 (2009).\n\n\n\nD. H. Lin and F. C. Yin. A Multiaxial Constitutive Law for Mammalian Left Ventricular Myocardium in Steady-State Barium Contracture or Tetanus. Journal of Biomechanical Engineering 120, 504–517 (1998).\n\n\n\nJ. D. Humphrey, R. K. Strumpf and F. C. Yin. Determination of a Constitutive Relation for Passive Myocardium: I. A New Functional Form. Journal of Biomechanical Engineering 112, 333–339 (1990).\n\n\n\nJ. M. Guccione, A. D. McCulloch and L. K. Waldman. Passive Material Properties of Intact Ventricular Myocardium Determined From a Cylindrical Model. Journal of Biomechanical Engineering 113, 42–55 (1991).\n\n\n\nY. Zheng, W. X. Chan, S. Nielles-Vallespin, A. D. Scott, P. F. Ferreira, H. L. Leo and C. H. Yap. Effects of myocardial sheetlet sliding on left ventricular function. Biomechanics and Modeling in Mechanobiology, 1–20 (2023).\n\n\n\nS. Rossi, T. Lassila, R. Ruiz-Baier, A. Sequeira and A. Quarteroni. Thermodynamically consistent orthotropic activation model capturing ventricular systolic wall thickening in cardiac electromechanics. European Journal of Mechanics-A/Solids 48, 129–142 (2014).\n\n\n\nR. Piersanti, F. Regazzoni, M. Salvador, A. F. Corno, C. Vergara and A. Quarteroni. 3D–0D closed-loop model for the simulation of cardiac biventricular electromechanics. Computer Methods in Applied Mechanics and Engineering 391, 114607 (2022).\n\n\n\nS. Hartmann and P. Neff. Polyconvexity of generalized polynomial-type hyperelastic strain energy functions for near-incompressibility. International journal of solids and structures 40, 2767–2791 (2003).\n\n\n\nR. FitzHugh. Impulses and physiological states in theoretical models of nerve membrane. Biophysical journal 1, 445–466 (1961).\n\n\n\nJ. Nagumo, S. Arimoto and S. Yoshizawa. An active pulse transmission line simulating nerve axon. Proceedings of the IRE 50, 2061–2070 (1962).\n\n\n\nP. Pathmanathan, J. M. Cordeiro and R. A. Gray. Comprehensive uncertainty quantification and sensitivity analysis for cardiac action potential models. Frontiers in physiology 10, 721 (2019).\n\n\n\nF. Regazzoni, M. Salvador, P. C. Africa, M. Fedele, L. Dedè and A. Quarteroni. A cardiac electromechanical model coupled with a lumped-parameter model for closed-loop blood circulation. Journal of Computational Physics 457, 111083 (2022).\n\n\n\nM. Hirschvogel, M. Bassilious, L. Jagschies, S. M. Wildhirt and M. W. Gee. A monolithic 3D-0D coupled closed-loop model of the heart and the vascular system: experiment-based parameter estimation for patient-specific cardiac mechanics. International journal for numerical methods in biomedical engineering 33, e2842 (2017).\n\n\n\nR. Plonsey. Volume Conductor Fields of Action Currents. Biophysical Journal 4, 317–328 (1964).\n\n\n\nD. Ogiermann, D. Balzani and L. E. Perotti. The Effect of Modeling Assumptions on the ECG in Monodomain and Bidomain Simulations. In: Functional Imaging and Modeling of the Heart, Vol. 12738, edited by D. B. Ennis, L. E. Perotti and V. Y. Wang (Cham, 2021); pp. 503–514.\n\n\n\n","category":"page"},{"location":"devdocs/#Developer-documentation","page":"Developer documentation","title":"Developer documentation","text":"","category":"section"},{"location":"devdocs/#Design-details","page":"Developer documentation","title":"Design details","text":"","category":"section"},{"location":"devdocs/#Models","page":"Developer documentation","title":"Models","text":"","category":"section"},{"location":"devdocs/","page":"Developer documentation","title":"Developer documentation","text":"In Thunderbolt a model essentially describes a set of PDEs, their boundary conditions and their coupling information on a high level.","category":"page"},{"location":"devdocs/#Functions","page":"Developer documentation","title":"Functions","text":"","category":"section"},{"location":"devdocs/","page":"Developer documentation","title":"Developer documentation","text":"Functions are simply semidiscretizations together with boundary condition and coupling information for the semidiscrete form.","category":"page"},{"location":"devdocs/#Problems","page":"Developer documentation","title":"Problems","text":"","category":"section"},{"location":"devdocs/","page":"Developer documentation","title":"Developer documentation","text":"A function equipped with a time interval and an initial guess.","category":"page"},{"location":"devdocs/#Operators","page":"Developer documentation","title":"Operators","text":"","category":"section"},{"location":"devdocs/","page":"Developer documentation","title":"Developer documentation","text":"Operators decouple the function description from their evaluation.","category":"page"},{"location":"devdocs/","page":"Developer documentation","title":"Developer documentation","text":"assemble_element","category":"page"},{"location":"devdocs/","page":"Developer documentation","title":"Developer documentation","text":"Questions:","category":"page"},{"location":"devdocs/","page":"Developer documentation","title":"Developer documentation","text":"How to deal with quasi-static problems which also need velocities?\nHow to make recursive assemble_element definitions for volume coupled problems?","category":"page"},{"location":"devdocs/#Solver","page":"Developer documentation","title":"Solver","text":"","category":"section"},{"location":"devdocs/","page":"Developer documentation","title":"Developer documentation","text":"Solvers construct operators from given functions and solve some problem with the function info.","category":"page"},{"location":"devdocs/","page":"Developer documentation","title":"Developer documentation","text":"setup_solver_caches(problem, solver, t₀) takes the problem and a solver to setup the operators needed during solve.","category":"page"},{"location":"devdocs/","page":"Developer documentation","title":"Developer documentation","text":"Questions: ","category":"page"},{"location":"devdocs/","page":"Developer documentation","title":"Developer documentation","text":"How to control which exact operator?\nWhen and how to check if the operator is compatible with the solver?","category":"page"},{"location":"devdocs/","page":"Developer documentation","title":"Developer documentation","text":"See also my brain flushing in real time some design decisions.","category":"page"},{"location":"howto/benchmarking/#Benchmarking","page":"Benchmarking","title":"Benchmarking","text":"","category":"section"},{"location":"howto/benchmarking/","page":"Benchmarking","title":"Benchmarking","text":"To investiage the performance we can use the following code snippet, which should be self-explanatory","category":"page"},{"location":"howto/benchmarking/","page":"Benchmarking","title":"Benchmarking","text":"using Thunderbolt.TimerOutputs\nTimerOutputs.enable_debug_timings(Thunderbolt)\nTimerOutputs.reset_timer!()\nrun_simulation()\nTimerOutputs.print_timer()\nTimerOutputs.disable_debug_timings(Thunderbolt)","category":"page"},{"location":"howto/benchmarking/","page":"Benchmarking","title":"Benchmarking","text":"It makes sense to make sure the code is properly precompiled before benchmarkins, e.g. by calling run_simulation() once before running the code snippet.","category":"page"},{"location":"howto/benchmarking/","page":"Benchmarking","title":"Benchmarking","text":"Internally we use TimerOutputs.jl for code annotations, marking performance critical sections.","category":"page"},{"location":"howto/benchmarking/","page":"Benchmarking","title":"Benchmarking","text":"More guides coming soon...","category":"page"},{"location":"api-reference/models/","page":"Models","title":"Models","text":"DocTestSetup = :(using Thunderbolt)","category":"page"},{"location":"api-reference/models/#Models","page":"Models","title":"Models","text":"","category":"section"},{"location":"api-reference/models/#Coefficient","page":"Models","title":"Coefficient","text":"","category":"section"},{"location":"api-reference/models/","page":"Models","title":"Models","text":"ConstantCoefficient\nFieldCoefficient\nAnalyticalCoefficient\nSpectralTensorCoefficient\nSpatiallyHomogeneousDataField\nCoordinateSystemCoefficient\nevaluate_coefficient","category":"page"},{"location":"api-reference/models/#Thunderbolt.ConstantCoefficient","page":"Models","title":"Thunderbolt.ConstantCoefficient","text":"ConstantCoefficient(value)\n\nEvaluates to the same value in space and time everywhere.\n\n\n\n\n\n","category":"type"},{"location":"api-reference/models/#Thunderbolt.FieldCoefficient","page":"Models","title":"Thunderbolt.FieldCoefficient","text":"FieldCoefficient(data, interpolation)\n\nA constant in time data field, interpolated per element with a given interpolation.\n\n\n\n\n\n","category":"type"},{"location":"api-reference/models/#Thunderbolt.AnalyticalCoefficient","page":"Models","title":"Thunderbolt.AnalyticalCoefficient","text":"AnalyticalCoefficient(f::Function, cs::CoordinateSystemCoefficient)\n\nA coefficient given as the analytical function f(x,t) in the specified coordiante system.\n\n\n\n\n\n","category":"type"},{"location":"api-reference/models/#Thunderbolt.SpectralTensorCoefficient","page":"Models","title":"Thunderbolt.SpectralTensorCoefficient","text":"SpectralTensorCoefficient(eigenvector_coefficient, eigenvalue_coefficient)\n\nRepresent a tensor A via spectral decomposition ∑ᵢ λᵢ vᵢ ⊗ vᵢ.\n\n\n\n\n\n","category":"type"},{"location":"api-reference/models/#Thunderbolt.SpatiallyHomogeneousDataField","page":"Models","title":"Thunderbolt.SpatiallyHomogeneousDataField","text":"SpatiallyHomogeneousDataField(timings::Vector, data::Vector)\n\nA data field which is constant in space and piecewise constant in time.\n\nThe value during the time interval [tᵢ,tᵢ₊₁] is dataᵢ, where t₀ is negative infinity and the last time point+1 is positive infinity.\n\n\n\n\n\n","category":"type"},{"location":"api-reference/models/#Thunderbolt.CoordinateSystemCoefficient","page":"Models","title":"Thunderbolt.CoordinateSystemCoefficient","text":"CoordinateSystemCoefficient(coordinate_system)\n\nHelper to obtain the location in some possibly problem-specific coordinate system, e.g. for analytical coefficients (see AnalyticalCoefficient).\n\n\n\n\n\n","category":"type"},{"location":"api-reference/models/#Microstructure","page":"Models","title":"Microstructure","text":"","category":"section"},{"location":"api-reference/models/","page":"Models","title":"Models","text":"AnisotropicPlanarMicrostructureModel\nOrthotropicMicrostructureModel\ncreate_simple_microstructure_model\nThunderbolt.streeter_type_fsn","category":"page"},{"location":"api-reference/models/#Thunderbolt.create_simple_microstructure_model","page":"Models","title":"Thunderbolt.create_simple_microstructure_model","text":"create_simple_microstructure_model(coordinate_system, ip_component::VectorInterpolationCollection; endo_helix_angle = deg2rad(80.0), epi_helix_angle = deg2rad(-65.0), endo_transversal_angle = 0.0, epi_transversal_angle = 0.0, sheetlet_angle = 0.0, make_orthogonal=true)\n\nCreate a rotating fiber field by deducing the circumferential direction from apicobasal and transmural gradients.\n\nnote: Note\nFIXME! Sheetlet angle construction is broken (i.e. does not preserve input angle).\n\n\n\n\n\n","category":"function"},{"location":"api-reference/models/#Thunderbolt.streeter_type_fsn","page":"Models","title":"Thunderbolt.streeter_type_fsn","text":"streeter_type_fsn(transmural_direction::Vec{3}, circumferential_direction::Vec{3}, apicobasal_direction::Vec{3}, helix_angle, transversal_angle, sheetlet_pseudo_angle, make_orthogonal=true)\n\nCompute fiber, sheetlet and normal direction from the transmural, circumferential, apicobasal directions in addition to given helix, transversal and sheetlet angles. The theory is based on the classical work by Streeter Jr et al. [4].\n\n\n\n\n\n","category":"function"},{"location":"api-reference/models/#Boundary-Conditions","page":"Models","title":"Boundary Conditions","text":"","category":"section"},{"location":"api-reference/models/","page":"Models","title":"Models","text":"RobinBC\nNormalSpringBC\nBendingSpringBC\nConstantPressureBC\nPressureFieldBC","category":"page"},{"location":"api-reference/models/#Thunderbolt.RobinBC","page":"Models","title":"Thunderbolt.RobinBC","text":"RobinBC\n\nbmP(bmu) cdot bmn_0 = - alpha bmu quad textbfx in partial Omega\n\n\n\n\n\n","category":"type"},{"location":"api-reference/models/#Solid-Mechanics","page":"Models","title":"Solid Mechanics","text":"","category":"section"},{"location":"api-reference/models/","page":"Models","title":"Models","text":"StructuralModel\nExtendedHillModel\nGeneralizedHillModel\nActiveStressModel","category":"page"},{"location":"api-reference/models/#Thunderbolt.StructuralModel","page":"Models","title":"Thunderbolt.StructuralModel","text":"StructuralModel(mechanical_model, face_models)\n\nA generic model for structural problems.\n\n\n\n\n\n","category":"type"},{"location":"api-reference/models/#Thunderbolt.ExtendedHillModel","page":"Models","title":"Thunderbolt.ExtendedHillModel","text":"ExtendedHillModel(passive_spring_model, active_spring_model, active_deformation_gradient_model,contraction_model, microstructure_model)\n\nThe extended (generalized) Hill model as proposed by Ogiermann et al. [5]. The original formulation dates back to Stålhand et al. [6] for smooth muscle tissues.\n\nIn this framework the model is formulated as an energy minimization problem with the following additively split energy:\n\nW(mathbfF mathbfF^rma) = W_rmpassive(mathbfF) + mathcalN(bmalpha)W_rmactive(mathbfFmathbfF^-rma)\n\nWhere W_rmpassive is the passive material response and W_rmactive the active response respectvely. mathcalN is the amount of formed crossbridges. We refer to the original paper [5] for more details.\n\n\n\n\n\n","category":"type"},{"location":"api-reference/models/#Thunderbolt.GeneralizedHillModel","page":"Models","title":"Thunderbolt.GeneralizedHillModel","text":"GeneralizedHillModel(passive_spring_model, active_spring_model, active_deformation_gradient_model,contraction_model, microstructure_model)\n\nThe generalized Hill framework as proposed by Göktepe et al. [7].\n\nIn this framework the model is formulated as an energy minimization problem with the following additively split energy:\n\nW(mathbfF mathbfF^rma) = W_rmpassive(mathbfF) + W_rmactive(mathbfFmathbfF^-rma)\n\nWhere W_rmpassive is the passive material response and W_rmactive the active response respectvely.\n\n\n\n\n\n","category":"type"},{"location":"api-reference/models/#Thunderbolt.ActiveStressModel","page":"Models","title":"Thunderbolt.ActiveStressModel","text":"ActiveStressModel(material_model, active_stress_model, contraction_model, microstructure_model)\n\nThe active stress model as originally proposed by Guccione et al. [8].\n\nIn this framework the model is formulated via balance of linear momentum in the first Piola Kirchhoff mathbfP:\n\nmathbfP(mathbfFT^rma) = partial_mathbfF W_rmpassive(mathbfF) + mathbfP^rma(mathbfF T^rma)\n\nwhere the passive material response can be described by an energy W_rmpassive and T^rma the active tension generated by the contraction model.\n\n\n\n\n\n","category":"type"},{"location":"api-reference/models/#Passive-Energies","page":"Models","title":"Passive Energies","text":"","category":"section"},{"location":"api-reference/models/","page":"Models","title":"Models","text":"NullEnergyModel\nLinearSpringModel\nTransverseIsotopicNeoHookeanModel\nHolzapfelOgden2009Model\nLinYinPassiveModel\nLinYinActiveModel\nHumphreyStrumpfYinModel\nGuccione1991PassiveModel\nThunderbolt.BioNeoHooekean","category":"page"},{"location":"api-reference/models/#Thunderbolt.NullEnergyModel","page":"Models","title":"Thunderbolt.NullEnergyModel","text":"A simple dummy energy with Psi = 0.\n\n\n\n\n\n","category":"type"},{"location":"api-reference/models/#Thunderbolt.LinearSpringModel","page":"Models","title":"Thunderbolt.LinearSpringModel","text":"A simple linear fiber spring model for testing purposes.\n\nPsi^rma = fraca^rmf2(I_e^rme-1)^2\n\n\n\n\n\n","category":"type"},{"location":"api-reference/models/#Thunderbolt.TransverseIsotopicNeoHookeanModel","page":"Models","title":"Thunderbolt.TransverseIsotopicNeoHookeanModel","text":"https://onlinelibrary.wiley.com/doi/epdf/10.1002/cnm.2866\n\n\n\n\n\n","category":"type"},{"location":"api-reference/models/#Thunderbolt.HolzapfelOgden2009Model","page":"Models","title":"Thunderbolt.HolzapfelOgden2009Model","text":"The well-known orthotropic material model for the passive response of cardiac tissues by Holzapfel and Ogden [9].\n\nPsi = fraca2b e^b(I_1-3) + sum_iinrmfrms fraca^i2b^i(e^b^iI_4^i - 1^2-1) + fraca^rmfs2b^rmfs(e^b^rmfsI_8^rmfs^2-1)\n\n\n\n\n\n","category":"type"},{"location":"api-reference/models/#Thunderbolt.LinYinPassiveModel","page":"Models","title":"Thunderbolt.LinYinPassiveModel","text":"This is the Fung-type transverse isotropic material model for the passive  response of cardiac tissue proposed by Lin and Yin [10].\n\nPsi = C_1(e^C_2(I_1-3)^2 + C_3(I_1-3)(I_4-1) + C_4(I_4-1)^2-1)\n\n\n\n\n\n","category":"type"},{"location":"api-reference/models/#Thunderbolt.LinYinActiveModel","page":"Models","title":"Thunderbolt.LinYinActiveModel","text":"This is the transverse isotropic material model for the active  response of cardiac tissue proposed by Lin and Yin [10].\n\nPsi=C_0 + C_1*(I_1-3)(I_4-1) + C_2(I_1-3)^2 + C_3*(I_4-1)^2 + C_3*(I_1-3) + C_5*(I_4-1)\n\n\n\n\n\n","category":"type"},{"location":"api-reference/models/#Thunderbolt.HumphreyStrumpfYinModel","page":"Models","title":"Thunderbolt.HumphreyStrumpfYinModel","text":"This is the transverse isotropic material model for the active  response of cardiac tissue proposed by Humphrey et al. [11].\n\nPsi = C_1(sqrtI_4-1)^2 + C_2(sqrtI_4-1)^3 + C_3(sqrtI_4-1)(I_1-3) + C_3(I_1-3)^2\n\n\n\n\n\n","category":"type"},{"location":"api-reference/models/#Thunderbolt.Guccione1991PassiveModel","page":"Models","title":"Thunderbolt.Guccione1991PassiveModel","text":"An orthotropic material model for the passive myocardial tissue response by Guccione et al. [12].\n\nPsi = B^rmff E^rmff^2 + B^rmssE^rmss^2 + B^rmnnE^rmnn^2 + B^rmns(E^rmns^2+E^rmsn^2) + B^rmfs(E^rmfs^2+E^rmsf^2) + B^rmfn(E^rmfn^2+E^rmnf^2)\n\nThe default parameterization is taken from from [13].\n\n\n\n\n\n","category":"type"},{"location":"api-reference/models/#Thunderbolt.BioNeoHooekean","page":"Models","title":"Thunderbolt.BioNeoHooekean","text":"BioNeoHooekean\n\nA simple isotropic Neo-Hookean model of the form\n\nPsi = alpha (barI_1-3)\n\n\n\n\n\n","category":"type"},{"location":"api-reference/models/#Active-Energies","page":"Models","title":"Active Energies","text":"","category":"section"},{"location":"api-reference/models/","page":"Models","title":"Models","text":"SimpleActiveSpring\nActiveMaterialAdapter","category":"page"},{"location":"api-reference/models/#Thunderbolt.SimpleActiveSpring","page":"Models","title":"Thunderbolt.SimpleActiveSpring","text":"SimpleActiveSpring\n\nA simple linear fiber spring as for example found in [7].\n\nPsi^rma = fraca^rmf2(I_e^rme-1)^2\n\n\n\n\n\n","category":"type"},{"location":"api-reference/models/#Thunderbolt.ActiveMaterialAdapter","page":"Models","title":"Thunderbolt.ActiveMaterialAdapter","text":"A simple helper to use a passive material model as an active material for GeneralizedHillModel, ExtendedHillModel and ActiveStressModel.\n\n\n\n\n\n","category":"type"},{"location":"api-reference/models/#Active-Deformation-Gradients","page":"Models","title":"Active Deformation Gradients","text":"","category":"section"},{"location":"api-reference/models/","page":"Models","title":"Models","text":"GMKActiveDeformationGradientModel\nGMKIncompressibleActiveDeformationGradientModel\nRLRSQActiveDeformationGradientModel","category":"page"},{"location":"api-reference/models/#Thunderbolt.GMKActiveDeformationGradientModel","page":"Models","title":"Thunderbolt.GMKActiveDeformationGradientModel","text":"The active deformation gradient formulation by Göktepe et al. [7].\n\nF^rma = (lambda^rma-1) f_0 otimes f_0\n\nI$\n\nSee also [5] for a further analysis.\n\n\n\n\n\n","category":"type"},{"location":"api-reference/models/#Thunderbolt.GMKIncompressibleActiveDeformationGradientModel","page":"Models","title":"Thunderbolt.GMKIncompressibleActiveDeformationGradientModel","text":"An incompressivle version of the active deformation gradient formulation by Göktepe et al. [7].\n\nF^rma = lambda^rma f_0 otimes f_0 + frac1sqrtlambda^rma(s_0 otimes s_0 + n_0 otimes n_0)\n\nSee also [5] for a further analysis.\n\n\n\n\n\n","category":"type"},{"location":"api-reference/models/#Thunderbolt.RLRSQActiveDeformationGradientModel","page":"Models","title":"Thunderbolt.RLRSQActiveDeformationGradientModel","text":"The active deformation gradient formulation by Rossi et al. [14].\n\nF^rma = lambda^rma f_0 otimes f_0 + (1+kappa(lambda^rma-1)) s_0 otimes s_0 + frac11+kappa(lambda^rma-1))lambda^rma n_0 otimes n_0\n\nWhere kappa geq 0 is the sheelet part.\n\nSee also [5] for a further analysis.\n\n\n\n\n\n","category":"type"},{"location":"api-reference/models/#Active-Stresses","page":"Models","title":"Active Stresses","text":"","category":"section"},{"location":"api-reference/models/","page":"Models","title":"Models","text":"SimpleActiveStress\nPiersantiActiveStress\nGuccione1993ActiveModel","category":"page"},{"location":"api-reference/models/#Thunderbolt.SimpleActiveStress","page":"Models","title":"Thunderbolt.SimpleActiveStress","text":"A simple active stress component.\n\nT^rma = T^rmmax  Ca_rmi frac(F cdot f_0) otimes f_0F cdot f_0\n\n\n\n\n\n","category":"type"},{"location":"api-reference/models/#Thunderbolt.PiersantiActiveStress","page":"Models","title":"Thunderbolt.PiersantiActiveStress","text":"The active stress component described by Piersanti et al. [15] (Eq. 3).\n\nT^rma = T^rmmax  Ca_rmi left(p^f frac(F cdot f_0) otimes f_0F cdot f_0 + p^rms frac(F cdot s_0) otimes s_0F cdot s_0 + p^rmn frac(F cdot n_0) otimes n_0F cdot n_0right)\n\n\n\n\n\n","category":"type"},{"location":"api-reference/models/#Thunderbolt.Guccione1993ActiveModel","page":"Models","title":"Thunderbolt.Guccione1993ActiveModel","text":"The active stress component as described by Guccione et al. [8].\n\nT^rma = T^rmmax  Ca_rmi (F cdot f_0) otimes f_0\n\n\n\n\n\n","category":"type"},{"location":"api-reference/models/#Compression","page":"Models","title":"Compression","text":"","category":"section"},{"location":"api-reference/models/","page":"Models","title":"Models","text":"NullCompressionPenalty\nSimpleCompressionPenalty\nHartmannNeffCompressionPenalty1\nHartmannNeffCompressionPenalty2\nHartmannNeffCompressionPenalty3","category":"page"},{"location":"api-reference/models/#Thunderbolt.NullCompressionPenalty","page":"Models","title":"Thunderbolt.NullCompressionPenalty","text":"A simple dummy compression model with U(I_3) = 0.\n\n\n\n\n\n","category":"type"},{"location":"api-reference/models/#Thunderbolt.SimpleCompressionPenalty","page":"Models","title":"Thunderbolt.SimpleCompressionPenalty","text":"A compression model with U(I_3) = beta (I_3 -1 - 2log(sqrtI_3))^a.\n\nnote: Note\nCitation missing. How is this one called in literature?\n\n\n\n\n\n","category":"type"},{"location":"api-reference/models/#Thunderbolt.HartmannNeffCompressionPenalty1","page":"Models","title":"Thunderbolt.HartmannNeffCompressionPenalty1","text":"An isochoric compression model where\n\nU(I_3) = beta (I_3^b + I_3^-b -2)^a\n\nwith ab geq 1.\n\nEntry 1 from table 3 in [16].\n\n\n\n\n\n","category":"type"},{"location":"api-reference/models/#Thunderbolt.HartmannNeffCompressionPenalty2","page":"Models","title":"Thunderbolt.HartmannNeffCompressionPenalty2","text":"An isochoric compression model where \n\nU(I_3) = beta (sqrtI_3-1)^a\n\nwith a  1.\n\nEntry 2 from table 3 in [16].\n\n\n\n\n\n","category":"type"},{"location":"api-reference/models/#Thunderbolt.HartmannNeffCompressionPenalty3","page":"Models","title":"Thunderbolt.HartmannNeffCompressionPenalty3","text":"An isochoric compression model where \n\nU(I_3) = beta (I_3 - 2log(sqrtI_3) + 4log(sqrtI_3)^2))\n\nEntry 3 from table 3 in [16].\n\n\n\n\n\n","category":"type"},{"location":"api-reference/models/#Electrophysiology","page":"Models","title":"Electrophysiology","text":"","category":"section"},{"location":"api-reference/models/","page":"Models","title":"Models","text":"MonodomainModel\nParabolicParabolicBidomainModel\nParabolicEllipticBidomainModel\nReactionDiffusionSplit","category":"page"},{"location":"api-reference/models/#Thunderbolt.MonodomainModel","page":"Models","title":"Thunderbolt.MonodomainModel","text":"Simplification of the bidomain model with the structure\n\nχCₘ∂ₜφₘ = ∇⋅κ∇φₘ + χ(Iᵢₒₙ(φₘ,𝐬) + Iₛₜᵢₘ(t))     ∂ₜ𝐬  = g(φₘ,𝐬)\n\n(TODO citation). Can be derived through the assumption (TODO), but also when the assumption is violated we can construct optimal κ (TODO citation+example) for the reconstruction of φₘ.\n\n\n\n\n\n","category":"type"},{"location":"api-reference/models/#Thunderbolt.ParabolicParabolicBidomainModel","page":"Models","title":"Thunderbolt.ParabolicParabolicBidomainModel","text":"The original model formulation (TODO citation) with the structure\n\nχCₘ∂ₜφₘ = ∇⋅κᵢ∇φᵢ + χ(Iᵢₒₙ(φₘ,𝐬,x) + Iₛₜᵢₘ,ᵢ(x,t))  χCₘ∂ₜφₘ = ∇⋅κₑ∇φₑ - χ(Iᵢₒₙ(φₘ,𝐬,x) + Iₛₜᵢₘ,ₑ(x,t))     ∂ₜ𝐬  = g(φₘ,𝐬,x)  φᵢ - φₑ = φₘ\n\nnote: Note\nNot implemented yet.\n\n\n\n\n\n","category":"type"},{"location":"api-reference/models/#Thunderbolt.ParabolicEllipticBidomainModel","page":"Models","title":"Thunderbolt.ParabolicEllipticBidomainModel","text":"Transformed bidomain model with the structure\n\nχCₘ∂ₜφₘ = ∇⋅κᵢ∇φₘ + ∇⋅κᵢ∇φₑ      + χ(Iᵢₒₙ(φₘ,𝐬,x) + Iₛₜᵢₘ(x,t))       0  = ∇⋅κᵢ∇φₘ + ∇⋅(κᵢ+κₑ)∇φₑ +  Iₛₜᵢₘ,ₑ(t) - Iₛₜᵢₘ,ᵢ(t)     ∂ₜ𝐬  = g(φₘ,𝐬,x)       φᵢ = φₘ + φₑ\n\nThis formulation is a transformation of the parabolic-parabolic form (c.f. TODO citation) and has been derived by (TODO citation) first.\n\nnote: Note\nNot implemented yet.\n\n\n\n\n\n","category":"type"},{"location":"api-reference/models/#Thunderbolt.ReactionDiffusionSplit","page":"Models","title":"Thunderbolt.ReactionDiffusionSplit","text":"Annotation for the classical reaction-diffusion split of a given model.\n\n\n\n\n\n","category":"type"},{"location":"api-reference/models/","page":"Models","title":"Models","text":"NoStimulationProtocol\nTransmembraneStimulationProtocol\nAnalyticalTransmembraneStimulationProtocol","category":"page"},{"location":"api-reference/models/#Thunderbolt.NoStimulationProtocol","page":"Models","title":"Thunderbolt.NoStimulationProtocol","text":"A dummy protocol describing the absence of stimuli for a simulation.\n\n\n\n\n\n","category":"type"},{"location":"api-reference/models/#Thunderbolt.TransmembraneStimulationProtocol","page":"Models","title":"Thunderbolt.TransmembraneStimulationProtocol","text":"Supertype for all stimulation protocols fulfilling I_rmstime = I_rmstimi.\n\n\n\n\n\n","category":"type"},{"location":"api-reference/models/#Thunderbolt.AnalyticalTransmembraneStimulationProtocol","page":"Models","title":"Thunderbolt.AnalyticalTransmembraneStimulationProtocol","text":"Describe the transmembrane stimulation by some analytical function on a given set of time intervals.\n\n\n\n\n\n","category":"type"},{"location":"api-reference/models/#Cells","page":"Models","title":"Cells","text":"","category":"section"},{"location":"api-reference/models/","page":"Models","title":"Models","text":"warning: Warning\nThese are intended to be replaced by ModelingToolkit analogues!","category":"page"},{"location":"api-reference/models/","page":"Models","title":"Models","text":"Thunderbolt.ParametrizedFHNModel\nThunderbolt.ParametrizedPCG2019Model","category":"page"},{"location":"api-reference/models/#Thunderbolt.ParametrizedFHNModel","page":"Models","title":"Thunderbolt.ParametrizedFHNModel","text":"The classical neuron electrophysiology model independently found by FitzHugh [17] and Nagumo et al. [18]. This model is less stiff and cheaper than any cardiac electrophysiology model, which maks it  a good choice for quick testing if things work at all.\n\n\n\n\n\n","category":"type"},{"location":"api-reference/models/#Thunderbolt.ParametrizedPCG2019Model","page":"Models","title":"Thunderbolt.ParametrizedPCG2019Model","text":"The canine ventricular cardiomyocyte electrophysiology model by Pathmanathan et al. [19].\n\n\n\n\n\n","category":"type"},{"location":"api-reference/models/#Fluid-Mechanics","page":"Models","title":"Fluid Mechanics","text":"","category":"section"},{"location":"api-reference/models/#Lumped-Models","page":"Models","title":"Lumped Models","text":"","category":"section"},{"location":"api-reference/models/","page":"Models","title":"Models","text":"Thunderbolt.DummyLumpedCircuitModel\nMTKLumpedCicuitModel\nRSAFDQ2022LumpedCicuitModel","category":"page"},{"location":"api-reference/models/#Thunderbolt.DummyLumpedCircuitModel","page":"Models","title":"Thunderbolt.DummyLumpedCircuitModel","text":"Keep the volume at a certain level.\n\n\n\n\n\n","category":"type"},{"location":"api-reference/models/#Thunderbolt.MTKLumpedCicuitModel","page":"Models","title":"Thunderbolt.MTKLumpedCicuitModel","text":"MTKLumpedCicuitModel\n\nA lumped (0D) circulatory model for LV simulations as presented in Regazzoni et al. [20].\n\n\n\n\n\n","category":"type"},{"location":"api-reference/models/#Thunderbolt.RSAFDQ2022LumpedCicuitModel","page":"Models","title":"Thunderbolt.RSAFDQ2022LumpedCicuitModel","text":"RSAFDQ2022LumpedCicuitModel\n\nA lumped (0D) circulatory model for LV simulations as presented in Regazzoni et al. [20].\n\n\n\n\n\n","category":"type"},{"location":"api-reference/models/#Multiphysics","page":"Models","title":"Multiphysics","text":"","category":"section"},{"location":"api-reference/models/#Generic-Interface","page":"Models","title":"Generic Interface","text":"","category":"section"},{"location":"api-reference/models/","page":"Models","title":"Models","text":"Thunderbolt.InterfaceCoupler\nThunderbolt.VolumeCoupler\nCoupling\nCoupledModel","category":"page"},{"location":"api-reference/models/#Thunderbolt.InterfaceCoupler","page":"Models","title":"Thunderbolt.InterfaceCoupler","text":"Abstract supertype for all interface coupling schemes.\n\n\n\n\n\n","category":"type"},{"location":"api-reference/models/#Thunderbolt.VolumeCoupler","page":"Models","title":"Thunderbolt.VolumeCoupler","text":"Abstract supertype for all volume coupling schemes.\n\n\n\n\n\n","category":"type"},{"location":"api-reference/models/#Thunderbolt.Coupling","page":"Models","title":"Thunderbolt.Coupling","text":"Helper to describe the coupling between problems.\n\n\n\n\n\n","category":"type"},{"location":"api-reference/models/#Thunderbolt.CoupledModel","page":"Models","title":"Thunderbolt.CoupledModel","text":"A descriptor for a coupled model.\n\n\n\n\n\n","category":"type"},{"location":"api-reference/models/#FSI","page":"Models","title":"FSI","text":"","category":"section"},{"location":"api-reference/models/","page":"Models","title":"Models","text":"LumpedFluidSolidCoupler\nHirschvogel2017SurrogateVolume\nRSAFDQ2022SurrogateVolume\nRSAFDQ2022Split\nRSAFDQ2022Model","category":"page"},{"location":"api-reference/models/#Thunderbolt.LumpedFluidSolidCoupler","page":"Models","title":"Thunderbolt.LumpedFluidSolidCoupler","text":"Enforce the constraints that   chamber volume 3D (solid model) = chamber volume 0D (lumped circuit) via Lagrange multiplied, where a surface pressure integral is introduced such that   ∫  ∂Ωendo Here chamber_volume_method is responsible to compute the 3D volume.\n\nThis approach has been proposed by Regazzoni et al. [20].\n\n\n\n\n\n","category":"type"},{"location":"api-reference/models/#Thunderbolt.Hirschvogel2017SurrogateVolume","page":"Models","title":"Thunderbolt.Hirschvogel2017SurrogateVolume","text":"Chamber volume estimator as presented in [21].\n\nCompute the chamber volume as a surface integral via the integral\n\n∫ (x + d) det(F) cof(F) N ∂Ωendo\n\nwhere it is assumed that the chamber is convex, zero displacement in apicobasal direction at the valvular plane occurs and the plane normal is aligned with the z axis, where the origin is at z=0.\n\n\n\n\n\n","category":"type"},{"location":"api-reference/models/#Thunderbolt.RSAFDQ2022SurrogateVolume","page":"Models","title":"Thunderbolt.RSAFDQ2022SurrogateVolume","text":"Compute the chamber volume as a surface integral via the integral   -∫ det(F) ((h ⊗ h)(x + d - b)) adj(F) N ∂Ωendo\n\nas proposed by Regazzoni et al. [20].\n\nnote: Note\nThis integral basically measures the volume via displacement on a given axis.\n\n\n\n\n\n","category":"type"},{"location":"api-reference/models/#Thunderbolt.RSAFDQ2022Split","page":"Models","title":"Thunderbolt.RSAFDQ2022Split","text":"Annotation for the split described by Regazzoni et al. [20].\n\n\n\n\n\n","category":"type"},{"location":"api-reference/models/#Thunderbolt.RSAFDQ2022Model","page":"Models","title":"Thunderbolt.RSAFDQ2022Model","text":"The split model described by Regazzoni et al. [20] alone.\n\n\n\n\n\n","category":"type"},{"location":"topics/couplers/#Couplers","page":"Couplers","title":"Couplers","text":"","category":"section"},{"location":"topics/couplers/","page":"Couplers","title":"Couplers","text":"Many multiphysics problems can be described by having individual physics + coupling terms. Couplers act as the abstraction layer to describe these terms.","category":"page"},{"location":"topics/couplers/","page":"Couplers","title":"Couplers","text":"More detailed information coming soon...","category":"page"},{"location":"tutorials/#Tutorials-Overview","page":"Overview","title":"Tutorials Overview","text":"","category":"section"},{"location":"tutorials/","page":"Overview","title":"Overview","text":"Coming soon...","category":"page"},{"location":"api-reference/mesh/","page":"Mesh","title":"Mesh","text":"DocTestSetup = :(using Thunderbolt)","category":"page"},{"location":"api-reference/mesh/#Mesh","page":"Mesh","title":"Mesh","text":"","category":"section"},{"location":"api-reference/mesh/","page":"Mesh","title":"Mesh","text":"Thunderbolt.SimpleMesh2D\nThunderbolt.SimpleMesh3D\nThunderbolt.to_mesh\nThunderbolt.elementtypes","category":"page"},{"location":"api-reference/mesh/#Thunderbolt.SimpleMesh2D","page":"Mesh","title":"Thunderbolt.SimpleMesh2D","text":"SimpleMesh2D{C <: AbstractCell, T <: Real} <: AbstractGrid{2}\n\nA grid which also has information abouts its vertices, faces and edges.\n\n\n\n\n\n","category":"type"},{"location":"api-reference/mesh/#Thunderbolt.SimpleMesh3D","page":"Mesh","title":"Thunderbolt.SimpleMesh3D","text":"SimpleMesh3D{C <: AbstractCell, T <: Real} <: AbstractGrid{3}\n\nA grid which also has information abouts its vertices, faces and edges.\n\n\n\n\n\n","category":"type"},{"location":"api-reference/mesh/#Coordinate-Systems","page":"Mesh","title":"Coordinate Systems","text":"","category":"section"},{"location":"api-reference/mesh/","page":"Mesh","title":"Mesh","text":"Thunderbolt.CartesianCoordinateSystem\nThunderbolt.LVCoordinateSystem","category":"page"},{"location":"api-reference/mesh/#Thunderbolt.CartesianCoordinateSystem","page":"Mesh","title":"Thunderbolt.CartesianCoordinateSystem","text":"CartesianCoordinateSystem(mesh)\n\nStandard cartesian coordinate system.\n\n\n\n\n\n","category":"type"},{"location":"api-reference/mesh/#Thunderbolt.LVCoordinateSystem","page":"Mesh","title":"Thunderbolt.LVCoordinateSystem","text":"LVCoordinateSystem(dh, u_transmural, u_apicobasal)\n\nSimplified universal ventricular coordinate on LV only, containing the transmural, apicobasal and circumferential coordinates. See compute_LV_coordinate_system to construct it.\n\n\n\n\n\n","category":"type"},{"location":"api-reference/mesh/#Mesh-Generators","page":"Mesh","title":"Mesh Generators","text":"","category":"section"},{"location":"api-reference/mesh/","page":"Mesh","title":"Mesh","text":"generate_mesh\ngenerate_ring_mesh\ngenerate_open_ring_mesh\ngenerate_quadratic_ring_mesh\ngenerate_quadratic_open_ring_mesh\ngenerate_ideal_lv_mesh","category":"page"},{"location":"api-reference/mesh/#Thunderbolt.generate_ring_mesh","page":"Mesh","title":"Thunderbolt.generate_ring_mesh","text":"generate_ring_mesh(num_elements_circumferential::Int, num_elements_radial::Int, num_elements_logintudinal::Int; inner_radius::T = Float64(0.75), outer_radius::T = Float64(1.0), longitudinal_lower::T = Float64(-0.2), longitudinal_upper::T = Float64(0.2), apicobasal_tilt::T=Float64(0.0)) where {T}\n\nGenerates an idealized full-hexahedral ring with linear ansatz. Geometrically it is the substraction of a small cylinder C_i of a large cylinder C_o. The number of elements for the cylindrical system can be controlled by the first three input parameters. The remaining parameters control the spatial dimensions and the ring shape.\n\n\n\n\n\n","category":"function"},{"location":"api-reference/mesh/#Thunderbolt.generate_open_ring_mesh","page":"Mesh","title":"Thunderbolt.generate_open_ring_mesh","text":"generate_open_ring_mesh(num_elements_circumferential::Int, num_elements_radial::Int, num_elements_logintudinal::Int, opening_angle::Float64; inner_radius::T = Float64(0.75), outer_radius::T = Float64(1.0), longitudinal_lower::T = Float64(-0.2), longitudinal_upper::T = Float64(0.2), apicobasal_tilt::T=Float64(0.0)) where {T}\n\nGenerates an idealized full-hexahedral ring with given opening angle and linear ansatz. Geometrically it is the substraction of a small cylinder C_i of a large cylinder C_o. The number of elements for the cylindrical system can be controlled by the first three input parameters. The remaining parameters control the spatial dimensions and the ring shape. The ring is opened along the Cartesian x-z plane.\n\n\n\n\n\n","category":"function"},{"location":"api-reference/mesh/#Thunderbolt.generate_quadratic_ring_mesh","page":"Mesh","title":"Thunderbolt.generate_quadratic_ring_mesh","text":"generate_quadratic_ring_mesh(num_elements_circumferential::Int, num_elements_radial::Int, num_elements_logintudinal::Int; inner_radius::T = Float64(0.75), outer_radius::T = Float64(1.0), longitudinal_lower::T = Float64(-0.2), longitudinal_upper::T = Float64(0.2), apicobasal_tilt::T=Float64(0.0)) where {T}\n\nGenerates an idealized full-hexahedral ring with quadratic ansatz. Geometrically it is the substraction of a small cylinder C_i of a large cylinder C_o. The number of elements for the cylindrical system can be controlled by the first three input parameters. The remaining parameters control the spatial dimensions and the ring shape.\n\n\n\n\n\n","category":"function"},{"location":"api-reference/mesh/#Thunderbolt.generate_quadratic_open_ring_mesh","page":"Mesh","title":"Thunderbolt.generate_quadratic_open_ring_mesh","text":"generate_quadratic_open_ring_mesh(num_elements_circumferential::Int, num_elements_radial::Int, num_elements_logintudinal::Int, opening_angle::Float64; inner_radius::T = Float64(0.75), outer_radius::T = Float64(1.0), longitudinal_lower::T = Float64(-0.2), longitudinal_upper::T = Float64(0.2), apicobasal_tilt::T=Float64(0.0)) where {T}\n\nGenerates an idealized full-hexahedral ring with given opening angle and quadratic ansatz. Geometrically it is the substraction of a small cylinder C_i of a large cylinder C_o. The number of elements for the cylindrical system can be controlled by the first three input parameters. The remaining parameters control the spatial dimensions and the ring shape. The ring is opened along the Cartesian x-z plane.\n\n\n\n\n\n","category":"function"},{"location":"api-reference/mesh/#Thunderbolt.generate_ideal_lv_mesh","page":"Mesh","title":"Thunderbolt.generate_ideal_lv_mesh","text":"generate_ideal_lv_mesh(num_elements_circumferential::Int, num_elements_radial::Int, num_elements_logintudinally::Int; inner_radius::T = Float64(0.7), outer_radius::T = Float64(1.0), longitudinal_upper::T = Float64(0.2), apex_inner::T = Float64(1.3), apex_outer::T = Float64(1.5))\n\nGenerate an idealized left ventricle as a truncated ellipsoid. The number of elements per axis are controlled by the first three parameters.\n\n\n\n\n\n","category":"function"},{"location":"api-reference/mesh/#Utility","page":"Mesh","title":"Utility","text":"","category":"section"},{"location":"api-reference/mesh/","page":"Mesh","title":"Mesh","text":"Thunderbolt.hexahedralize\nThunderbolt.uniform_refinement\nload_carp_mesh\nload_voom2_mesh\nload_mfem_mesh","category":"page"},{"location":"api-reference/mesh/#Thunderbolt.load_carp_mesh","page":"Mesh","title":"Thunderbolt.load_carp_mesh","text":"load_carp_mesh(filename)\n\nMesh format taken from https://carp.medunigraz.at/file_formats.html .\n\n\n\n\n\n","category":"function"},{"location":"api-reference/mesh/#Thunderbolt.load_voom2_mesh","page":"Mesh","title":"Thunderbolt.load_voom2_mesh","text":"load_voom2_mesh(filename)\n\nLoader for the voom2 legacy format.\n\n\n\n\n\n","category":"function"},{"location":"api-reference/mesh/#Thunderbolt.load_mfem_mesh","page":"Mesh","title":"Thunderbolt.load_mfem_mesh","text":"load_mfem_mesh(filename)\n\nLoader for straight mfem meshes supporting v1.0.\n\n\n\n\n\n","category":"function"},{"location":"topics/operators/#Operators","page":"Operators","title":"Operators","text":"","category":"section"},{"location":"topics/operators/","page":"Operators","title":"Operators","text":"Operators act as the translation layer between discretized problems and solvers by abstracting \"functions of functions\".","category":"page"},{"location":"topics/operators/","page":"Operators","title":"Operators","text":"Many multiphysics problems can be efficiently described as blocked problems, which gives rise to the concept of blocked operators by partitioning the input of the function into multiple ones.","category":"page"},{"location":"topics/operators/","page":"Operators","title":"Operators","text":"More detailed information coming soon...","category":"page"},{"location":"devdocs/DifferentialEquationsjl-issue/#Brain-flush-about-relevant-design-decisions","page":"Brain flush about relevant design decisions","title":"Brain flush about relevant design decisions","text":"","category":"section"},{"location":"devdocs/DifferentialEquationsjl-issue/","page":"Brain flush about relevant design decisions","title":"Brain flush about relevant design decisions","text":"https://github.com/SciML/DifferentialEquations.jl/issues/997","category":"page"},{"location":"devdocs/DifferentialEquationsjl-issue/","page":"Brain flush about relevant design decisions","title":"Brain flush about relevant design decisions","text":"My personal roadmap is to publish Thunderbolt.jl soon, which is a multiphysics framework which tries to be close to the design of the libraries in the DifferentialEquations.jl ecosystem, and to upstream relevant parts (after cleaning up and settling the design). ","category":"page"},{"location":"devdocs/DifferentialEquationsjl-issue/","page":"Brain flush about relevant design decisions","title":"Brain flush about relevant design decisions","text":"In Thunderbolt.jl I approach the outlined problems as follows (in the spoiler because likely not relevant for most readers). I put it here to see what problems come if we follow one approach deeper into the PDE rabbit hole (multiphysics/coupled problems). I hope that we can learn something about the interface design from this description.","category":"page"},{"location":"devdocs/DifferentialEquationsjl-issue/","page":"Brain flush about relevant design decisions","title":"Brain flush about relevant design decisions","text":"1,2,3,5 I do not have a clear separation between the hypothetic PDEFunction and the PDEProblem, because I could not figure out how to untie them in a modular and generic fashion, yet. Instead I have a granular distinction between the different types of PDE problems which I encounter (CoupledProblem, SplitProblem, ParitionedProblem,PointwiseProblem,QuasiStaticNonlinearProblem,QuasiStaticDAEProblem...). I ended up here because I am not sure what the distinguishing property between the problems should be (in contrast to ODE/SDE/...-Problems, where it is immediately clear).","category":"page"},{"location":"devdocs/DifferentialEquationsjl-issue/","page":"Brain flush about relevant design decisions","title":"Brain flush about relevant design decisions","text":"4,7 When constructing the problem from some model the discrete mesh (with some coordinate system), a discretization technique and boundary condition information is passed. This way the problem can cache the boundary condition information for a specific discretization and it also directly has the solution vector sizes (+meta information about the degrees of freedom). This way I can only handle a limited number of methods from class B (partitioned, basically method of lines) above and technically it should be possible to provide support for A (not touched this one yet).","category":"page"},{"location":"devdocs/DifferentialEquationsjl-issue/","page":"Brain flush about relevant design decisions","title":"Brain flush about relevant design decisions","text":"6 Solvers are defined per problem, as in the SciML ecosystem. However, this does not feel like the best choice due to the fine granularity of the problems described above. Basically when constructing the solvers I am constructing a sequence of operators, such that I get discrete (Non)linearFunctions of the form f(ut) plus caches for evaluating f, as well as caches for the inner solvers (e.g. \"NewtonRaphsonCache\", which is very similar to NonlinearSolve.jl . The operator is probably closest to a PDEFunction. However, I can not find a way to hoist the operator construction directly into the *Problems yet, because different solvers might need different operators. I think we can do the hoisting and I just had not enough time to figure out how to do it properly in the data structures.","category":"page"},{"location":"devdocs/DifferentialEquationsjl-issue/","page":"Brain flush about relevant design decisions","title":"Brain flush about relevant design decisions","text":"8 Kinda of a blocker for releasing my package public. I am currently basically poking around in the solver caches with dispatches. Since I want to interface against the SciML ecosystem in the long term anyway I have not bothered investing time. But I have something analogue to the TimeChoiceIterator in mind. I should note here that it is usually impossible to store the the full space-time solution in RAM (in contrast to e.g. pure small ODE problems). It should be just made clear that evaluating u(xt) is possible, but quite costly and comes with inaccurracies if the mesh is nonlinear (because we basically have to find where to evaluate, which usually involves solving a nonlinear problem). It should also be considered that many problems involve more than one field (e.g. \"heat and mechanics\" fields), hence we also need some way to distinguish between fields in the iterator.","category":"page"},{"location":"devdocs/DifferentialEquationsjl-issue/","page":"Brain flush about relevant design decisions","title":"Brain flush about relevant design decisions","text":"I have not given much details on the caching infrastructure since I am currently reworking it (and I honestly do not think that in depth detail here really will help with the problems). But the idea is similar to what is done in any package in the DifferentialEquations.jl ecosystem. Solvers construct caches and use them to control dispatches. ","category":"page"},{"location":"devdocs/DifferentialEquationsjl-issue/","page":"Brain flush about relevant design decisions","title":"Brain flush about relevant design decisions","text":"The obvious problem with my approach is that we do not clearly separate between modeling and solver. Yes, it allows that the model structure can be easier utilized, but I think we should be able to get an interface with a clearer separation and better reusability of individual components.","category":"page"},{"location":"howto/#How-to-Guides-Overview","page":"Overview","title":"How-to Guides Overview","text":"","category":"section"},{"location":"howto/","page":"Overview","title":"Overview","text":"This page gives an overview of the how-to guides. How-to guides address various common tasks one might want to do in a cardiac multiphysics simuation. Many of the guides are extensions, or build on top of, the tutorials and, therefore,  some familiarity with Thunderbolt is assumed.","category":"page"},{"location":"howto/","page":"Overview","title":"Overview","text":"","category":"page"},{"location":"howto/#[Benchmarking](benchmarking.md)","page":"Overview","title":"Benchmarking","text":"","category":"section"},{"location":"howto/","page":"Overview","title":"Overview","text":"This guide shows how we can understand which parts of the simulation how to get information about where time and memory is spent.","category":"page"},{"location":"howto/","page":"Overview","title":"Overview","text":"","category":"page"},{"location":"howto/","page":"Overview","title":"Overview","text":"More coming soon...","category":"page"},{"location":"api-reference/solver/","page":"Solver","title":"Solver","text":"DocTestSetup = :(using Thunderbolt)","category":"page"},{"location":"api-reference/solver/#Solver","page":"Solver","title":"Solver","text":"","category":"section"},{"location":"api-reference/solver/","page":"Solver","title":"Solver","text":"BackwardEulerSolver\nForwardEulerSolver\nForwardEulerCellSolver\nThunderbolt.AdaptiveForwardEulerReactionSubCellSolver\nThunderbolt.ThreadedForwardEulerCellSolver\nLoadDrivenSolver\nNewtonRaphsonSolver","category":"page"},{"location":"api-reference/solver/#Thunderbolt.LoadDrivenSolver","page":"Solver","title":"Thunderbolt.LoadDrivenSolver","text":"LoadDrivenSolver{IS, T, PFUN}\n\nSolve the nonlinear problem F(u,t)=0 with given time increments Δton some interval [t_begin, t_end] where t is some pseudo-time parameter.\n\n\n\n\n\n","category":"type"},{"location":"api-reference/solver/#Thunderbolt.NewtonRaphsonSolver","page":"Solver","title":"Thunderbolt.NewtonRaphsonSolver","text":"NewtonRaphsonSolver{T}\n\nClassical Newton-Raphson solver to solve nonlinear problems of the form F(u) = 0. To use the Newton-Raphson solver you have to dispatch on\n\nupdate_linearization!\n\n\n\n\n\n","category":"type"},{"location":"api-reference/solver/#Operator-Splitting-Module","page":"Solver","title":"Operator Splitting Module","text":"","category":"section"},{"location":"api-reference/solver/","page":"Solver","title":"Solver","text":"Thunderbolt.OS.LieTrotterGodunov\nThunderbolt.OS.GenericSplitFunction\nThunderbolt.OS.OperatorSplittingIntegrator","category":"page"},{"location":"api-reference/solver/#Thunderbolt.OS.LieTrotterGodunov","page":"Solver","title":"Thunderbolt.OS.LieTrotterGodunov","text":"LieTrotterGodunov <: AbstractOperatorSplittingAlgorithm\n\nA first order operator splitting algorithm attributed to [1–3].\n\n\n\n\n\n","category":"type"},{"location":"api-reference/solver/#Thunderbolt.OS.GenericSplitFunction","page":"Solver","title":"Thunderbolt.OS.GenericSplitFunction","text":"GenericSplitFunction(functions::Tuple, dof_ranges::Tuple)\nGenericSplitFunction(functions::Tuple, dof_ranges::Tuple, syncronizers::Tuple)\n\nThis type of function describes a set of connected inner functions in mass-matrix form, as usually found in operator splitting procedures.\n\nnote: Automatic sync\nWe should be able to get rid of the synchronizer and handle the connection of coefficients and solutions in semidiscretize.\n\n\n\n\n\n","category":"type"},{"location":"api-reference/solver/#Thunderbolt.OS.OperatorSplittingIntegrator","page":"Solver","title":"Thunderbolt.OS.OperatorSplittingIntegrator","text":"OperatorSplittingIntegrator <: AbstractODEIntegrator\n\nA variant of ODEIntegrator to perform opeartor splitting.\n\nDerived from https://github.com/CliMA/ClimaTimeSteppers.jl/blob/ef3023747606d2750e674d321413f80638136632/src/integrators.jl.\n\n\n\n\n\n","category":"type"},{"location":"topics/time-integration/#Time-Integration","page":"Time Integration","title":"Time Integration","text":"","category":"section"},{"location":"topics/time-integration/#Load-Stepping","page":"Time Integration","title":"Load Stepping","text":"","category":"section"},{"location":"topics/time-integration/","page":"Time Integration","title":"Time Integration","text":"During load stepping we want to solve a nonlinear problem with pseudo-time t on some time interval t_0 t_1. An initial guess is provided for the first nonlinear solve. Formally we can write down the problem as follows. Find u(t) such that","category":"page"},{"location":"topics/time-integration/","page":"Time Integration","title":"Time Integration","text":"0 = F(u(t) p t) qquad texton  t_0 t_1","category":"page"},{"location":"topics/time-integration/","page":"Time Integration","title":"Time Integration","text":"where u usually descibes the displacement of some mechanical system and the operator F contains some mechanical load, hence the name load stepping. We obtain systems with this form if we assume that inertial terms are neglibile, or formally d^2_tu approx 0.","category":"page"},{"location":"topics/time-integration/#Operator-Splitting","page":"Time Integration","title":"Operator Splitting","text":"","category":"section"},{"location":"topics/time-integration/","page":"Time Integration","title":"Time Integration","text":"For operator splitting procedures we assume that we have some time-dependent problem with initial condition u_0 = u(t_0) and an operator F describing the right hand side. We assume that F can be additively split into N suboperators F_i. This can be formally written as","category":"page"},{"location":"topics/time-integration/","page":"Time Integration","title":"Time Integration","text":"d_t u(t) = F(u(t) p t) = F_1(u(t) p t) +  + F_N(u(t) p t)  ","category":"page"},{"location":"topics/time-integration/","page":"Time Integration","title":"Time Integration","text":"We call t time the u(t) the state of the system. This way we can define subproblems","category":"page"},{"location":"topics/time-integration/","page":"Time Integration","title":"Time Integration","text":"beginaligned\n    d_t u(t) = F_1(u(t) p t) \n              vdots \n    d_t u(t) = F_N(u(t) p t)\nendaligned","category":"page"},{"location":"topics/time-integration/","page":"Time Integration","title":"Time Integration","text":"Now, the key idea of operator splitting methods is that solving the subproblems can be easier, and hopefully more efficient, than solving the full problem. Arguably the easiest algorithm to advance the solution from t_0 to some time point t_1  t_0 is the Lie-Trotter-Godunov operator splitting [1–3]. Here the subproblems are solved consecutively, where the solution of one subproblem is taken as the initial guess for the next subproblem, until we have solved all subproblems. In this case we have constructed an approximation for u(t_1).","category":"page"},{"location":"topics/time-integration/","page":"Time Integration","title":"Time Integration","text":"More formally we can write the Lie-Trotter-Godunov scheme [1–3] as follows: ","category":"page"},{"location":"topics/time-integration/","page":"Time Integration","title":"Time Integration","text":"beginaligned\n    textSolve quad d_t u^1(t) = F_1(u^1(t) p t)   quad texton  t_0 t_1  textwith  u^1(t_0) = u_0 \n    textSolve quad d_t u^2(t) = F_2(u^2(t) p t)   quad texton  t_0 t_1  textwith  u^2(t_0) = u^1(t_1) \n              vdots   \n    textSolve quad d_t u^N(t) = F_N(u^N(t) p t)   quad texton  t_0 t_1  textwith  u^N(t_0) = u^N-1(t_1)\nendaligned","category":"page"},{"location":"topics/time-integration/","page":"Time Integration","title":"Time Integration","text":"Such that we obtain the approximation u(t_1) approx u^N-1(t_1). The approximation is first order in time.","category":"page"},{"location":"topics/time-integration/","page":"Time Integration","title":"Time Integration","text":"Probably the most widely spread application for operator splitting schemes is the solution for reaction diffusion systems. These have the form","category":"page"},{"location":"topics/time-integration/","page":"Time Integration","title":"Time Integration","text":"d_t u(t) = Lu + R(u)","category":"page"},{"location":"topics/time-integration/","page":"Time Integration","title":"Time Integration","text":"where L is some linear operator, usually coming from the linaerization of diffusion opeartors and a nonlinear reaction part R which has some interesting locality properties. This locallity property usually tells is that the time evolution of R natually decouples into many small blocks. This way we only have to solve for the time evolution of a linear problem d_t u(t) = Lu and a set of many very small nonlinear problems d_t u(t) = R(u).","category":"page"},{"location":"topics/time-integration/#Analysis-of-Lie-Trotter-Godunov","page":"Time Integration","title":"Analysis of Lie-Trotter-Godunov","text":"","category":"section"},{"location":"topics/time-integration/","page":"Time Integration","title":"Time Integration","text":"It should be noted that even if we solve all subproblems analytically, then operator splitting schemes themselves almost always come with their own approximation an error, which is simply called the splitting error. For linear problems this error can vanish if all suboperators F_i commute, i.e. if F_j cdot F_i = F_i cdot F_j for all 1 leq ij leq N, which can be shown with the Baker-Campbell-Hausdorff formula. Let us investigate the convergence order for two bounded linear operators L_1 and L_2, i.e. on the following system of ODEs","category":"page"},{"location":"topics/time-integration/","page":"Time Integration","title":"Time Integration","text":"d_t u = L_1 u + L_2 u  ","category":"page"},{"location":"topics/time-integration/","page":"Time Integration","title":"Time Integration","text":"Here the exact solution u at time point t for some initial condition at t_0 = 0 is","category":"page"},{"location":"topics/time-integration/","page":"Time Integration","title":"Time Integration","text":"u(t) = e^(L_1 + L_2)t u_0  ","category":"page"},{"location":"topics/time-integration/","page":"Time Integration","title":"Time Integration","text":"while the solution for the Lie-Trotter-Godunov scheme is","category":"page"},{"location":"topics/time-integration/","page":"Time Integration","title":"Time Integration","text":"tildeu(t) = e^L_1te^L_2t u_0  ","category":"page"},{"location":"topics/time-integration/","page":"Time Integration","title":"Time Integration","text":"The local truncation error can be written as","category":"page"},{"location":"topics/time-integration/","page":"Time Integration","title":"Time Integration","text":"epsilon(t) = e^L_1te^L_2t - e^(L_1 + L_2)t  u_0","category":"page"},{"location":"topics/time-integration/","page":"Time Integration","title":"Time Integration","text":"if we now replace the exponentials with their definitions we obtain for the first norm","category":"page"},{"location":"topics/time-integration/","page":"Time Integration","title":"Time Integration","text":"beginaligned\n(I + tL_1 + frach^22L_1^2 + )(I + tL_2 + frach^22L_2^2 + ) - (I + t(L_1 + L_2) + frach^22(L_1+L_2)^2 + ) \n= frach^22 (L_1 L_2 - L_2 L_1) +   leq frach^22  (L_1 L_2 - L_2 L_1)  + O(h^3)\nendaligned","category":"page"},{"location":"topics/time-integration/","page":"Time Integration","title":"Time Integration","text":"This shows that the local truncation error is O(h^2) and hence the scheme is first order accurate.","category":"page"},{"location":"topics/time-integration/","page":"Time Integration","title":"Time Integration","text":"Showing stability is also straight forward. We assumed that L_1 and L_2 are bounded, so we obtain for all time points t  t and all repeated subdivisions n in mathbbN the following bound","category":"page"},{"location":"topics/time-integration/","page":"Time Integration","title":"Time Integration","text":"(e^L_1fractne^L_2fractn)^n\nleq e^L_1fractne^L_2fractn^n\nleq e^L_1fractn^n e^L_2fractn^n\nleq e^L_1t e^L_2t\nleq e^L_1t e^L_2t\nleq C  infty","category":"page"},{"location":"topics/time-integration/","page":"Time Integration","title":"Time Integration","text":"which implies stability of the scheme.","category":"page"},{"location":"topics/time-integration/#References","page":"Time Integration","title":"References","text":"","category":"section"},{"location":"topics/time-integration/","page":"Time Integration","title":"Time Integration","text":"S. Lie. Theorie der Transformationsgruppen I. Mathematische Annalen 16, 441–528 (1880).\n\n\n\nH. F. Trotter. On the Product of Semi-Groups of Operators. Proceedings of the American Mathematical Society 10, 545–551 (1959).\n\n\n\nS. K. Godunov. A difference method for numerical calculation of discontinuous solutions of the equations of hydrodynamics. Matematicheskii Sbornik 89, 271–306 (1959).\n\n\n\n","category":"page"},{"location":"api-reference/operators/","page":"Operators","title":"Operators","text":"DocTestSetup = :(using Thunderbolt)","category":"page"},{"location":"api-reference/operators/#Operators","page":"Operators","title":"Operators","text":"","category":"section"},{"location":"api-reference/operators/","page":"Operators","title":"Operators","text":"BlockOperator\nThunderbolt.AbstractNonlinearOperator\nThunderbolt.AbstractBilinearOperator\nThunderbolt.AbstractLinearOperator\nAssembledNonlinearOperator\nAssembledBilinearOperator\nDiagonalOperator\nNullOperator\nLinearNullOperator\nLinearOperator","category":"page"},{"location":"api-reference/operators/#Thunderbolt.AbstractNonlinearOperator","page":"Operators","title":"Thunderbolt.AbstractNonlinearOperator","text":"AbstractNonlinearOperator\n\nModels of a nonlinear function F(u)v, where v is a test function.\n\nInterface:     (op::AbstractNonlinearOperator)(residual::AbstractVector, in::AbstractNonlinearOperator)     eltype()     size()\n\n# linearization\nmul!(out::AbstractVector, op::AbstractNonlinearOperator, in::AbstractVector)\nmul!(out::AbstractVector, op::AbstractNonlinearOperator, in::AbstractVector, α, β)\nupdate_linearization!(op::AbstractNonlinearOperator, u::AbstractVector, time)\nupdate_linearization!(op::AbstractNonlinearOperator, u::AbstractVector, residual::AbstractVector, time)\n\n\n\n\n\n","category":"type"},{"location":"api-reference/operators/#Thunderbolt.AbstractLinearOperator","page":"Operators","title":"Thunderbolt.AbstractLinearOperator","text":"AbstractLinearOperator\n\nSupertype for operators which only depend on the test space.\n\n\n\n\n\n","category":"type"},{"location":"api-reference/#API-Reference-Overview","page":"Overview","title":"API Reference Overview","text":"","category":"section"},{"location":"api-reference/","page":"Overview","title":"Overview","text":"Pages = [\n    \"models.md\",\n    \"mesh.md\",\n    \"discretization.md\",\n    \"operators.md\",\n    \"solver.md\",\n    \"utility.md\",\n]","category":"page"},{"location":"topics/#Topic-Guide-Overview","page":"Overview","title":"Topic Guide Overview","text":"","category":"section"},{"location":"topics/","page":"Overview","title":"Overview","text":"Coming soon...","category":"page"},{"location":"api-reference/utility/","page":"Utility","title":"Utility","text":"DocTestSetup = :(using Thunderbolt)","category":"page"},{"location":"api-reference/utility/#Utility","page":"Utility","title":"Utility","text":"","category":"section"},{"location":"api-reference/utility/#Collections","page":"Utility","title":"Collections","text":"","category":"section"},{"location":"api-reference/utility/","page":"Utility","title":"Utility","text":"Thunderbolt.InterpolationCollection\ngetinterpolation\nThunderbolt.ScalarInterpolationCollection\nThunderbolt.VectorInterpolationCollection\nThunderbolt.VectorizedInterpolationCollection\nLagrangeCollection\nQuadratureRuleCollection\ngetquadraturerule\nCellValueCollection\nFaceValueCollection","category":"page"},{"location":"api-reference/utility/#Thunderbolt.InterpolationCollection","page":"Utility","title":"Thunderbolt.InterpolationCollection","text":"InterpolationCollection\n\nA collection of compatible interpolations over some (possilby different) cells.\n\n\n\n\n\n","category":"type"},{"location":"api-reference/utility/#Thunderbolt.ScalarInterpolationCollection","page":"Utility","title":"Thunderbolt.ScalarInterpolationCollection","text":"ScalarInterpolationCollection\n\nA collection of compatible scalar-valued interpolations over some (possilby different) cells.\n\n\n\n\n\n","category":"type"},{"location":"api-reference/utility/#Thunderbolt.VectorInterpolationCollection","page":"Utility","title":"Thunderbolt.VectorInterpolationCollection","text":"VectorInterpolationCollection\n\nA collection of compatible vector-valued interpolations over some (possilby different) cells.\n\n\n\n\n\n","category":"type"},{"location":"api-reference/utility/#Thunderbolt.VectorizedInterpolationCollection","page":"Utility","title":"Thunderbolt.VectorizedInterpolationCollection","text":"VectorizedInterpolationCollection{order} <: InterpolationCollection\n\nA collection of fixed-order vectorized Lagrange interpolations across different cell types.\n\n\n\n\n\n","category":"type"},{"location":"api-reference/utility/#Thunderbolt.LagrangeCollection","page":"Utility","title":"Thunderbolt.LagrangeCollection","text":"LagrangeCollection{order} <: InterpolationCollection\n\nA collection of fixed-order Lagrange interpolations across different cell types.\n\n\n\n\n\n","category":"type"},{"location":"api-reference/utility/#Thunderbolt.QuadratureRuleCollection","page":"Utility","title":"Thunderbolt.QuadratureRuleCollection","text":"QuadratureRuleCollection(order::Int)\n\nA collection of quadrature rules across different cell types.\n\n\n\n\n\n","category":"type"},{"location":"api-reference/utility/#Thunderbolt.CellValueCollection","page":"Utility","title":"Thunderbolt.CellValueCollection","text":"CellValueCollection(::QuadratureRuleCollection, ::InterpolationCollection)\n\nHelper to construct and query the correct cell values on mixed grids.\n\n\n\n\n\n","category":"type"},{"location":"api-reference/utility/#Thunderbolt.FaceValueCollection","page":"Utility","title":"Thunderbolt.FaceValueCollection","text":"FaceValueCollection(::QuadratureRuleCollection, ::InterpolationCollection)\n\nHelper to construct and query the correct face values on mixed grids.\n\n\n\n\n\n","category":"type"},{"location":"api-reference/utility/#Iteration","page":"Utility","title":"Iteration","text":"","category":"section"},{"location":"api-reference/utility/","page":"Utility","title":"Utility","text":"QuadraturePoint\nQuadratureIterator","category":"page"},{"location":"api-reference/utility/#Thunderbolt.QuadraturePoint","page":"Utility","title":"Thunderbolt.QuadraturePoint","text":"QuadraturePoint{dim, T}\n\nA simple helper to carry quadrature point information.\n\n\n\n\n\n","category":"type"},{"location":"api-reference/utility/#Thunderbolt.QuadratureIterator","page":"Utility","title":"Thunderbolt.QuadratureIterator","text":"QuadratureIterator(::QuadratureRule)\nQuadratureIterator(::FaceQuadratureRule, local_face_idx::Int)\nQuadratureIterator(::CellValues)\nQuadratureIterator(::FaceValues)\n\nA helper to loop over the quadrature points in some rule or cache with type QuadraturePoint.\n\n\n\n\n\n","category":"type"},{"location":"api-reference/utility/","page":"Utility","title":"Utility","text":"TODO TimeChoiceIterator https://github.com/termi-official/Thunderbolt.jl/issues/32","category":"page"},{"location":"api-reference/utility/#IO","page":"Utility","title":"IO","text":"","category":"section"},{"location":"api-reference/utility/","page":"Utility","title":"Utility","text":"ParaViewWriter\nJLD2Writer\nstore_timestep!\nstore_timestep_celldata!\nstore_timestep_field!\nstore_coefficient!\nstore_green_lagrange!\nfinalize_timestep!\nfinalize!","category":"page"},{"location":"api-reference/utility/#Thunderbolt.ParaViewWriter","page":"Utility","title":"Thunderbolt.ParaViewWriter","text":"\n\n\n\n","category":"type"},{"location":"api-reference/utility/#Thunderbolt.JLD2Writer","page":"Utility","title":"Thunderbolt.JLD2Writer","text":"\n\n\n\n","category":"type"},{"location":"api-reference/utility/#Transfer-Operators","page":"Utility","title":"Transfer Operators","text":"","category":"section"},{"location":"api-reference/utility/","page":"Utility","title":"Utility","text":"Thunderbolt.NodalIntergridInterpolation\nThunderbolt.transfer!","category":"page"},{"location":"api-reference/utility/#Thunderbolt.NodalIntergridInterpolation","page":"Utility","title":"Thunderbolt.NodalIntergridInterpolation","text":"NodalIntergridInterpolation(dh_from::DofHandler{sdim}, dh_to::DofHandler{sdim}, field_name::Symbol)\n\nConstruct a transfer operator to move a field field_name from dof handler dh_from to another dof handler dh_to, assuming that all spatial coordinates of the dofs for dh_to are in the interior or boundary of the mesh contained within dh_from. This is necessary to have valid interpolation values, as this operator does not have extrapolation functionality.\n\nnote: Note\nWe assume a continuous coordinate field, if the interpolation of the named field is continuous.\n\n\n\n\n\n","category":"type"},{"location":"api-reference/utility/#Thunderbolt.transfer!","page":"Utility","title":"Thunderbolt.transfer!","text":"This is basically a fancy matrix-vector product to transfer the solution from one problem to another one.\n\n\n\n\n\n","category":"function"},{"location":"api-reference/utility/#Postprocessing","page":"Utility","title":"Postprocessing","text":"","category":"section"},{"location":"api-reference/utility/#ECG","page":"Utility","title":"ECG","text":"","category":"section"},{"location":"api-reference/utility/","page":"Utility","title":"Utility","text":"Thunderbolt.Plonsey1964ECGGaussCache\nThunderbolt.evaluate_ecg","category":"page"},{"location":"api-reference/utility/#Thunderbolt.Plonsey1964ECGGaussCache","page":"Utility","title":"Thunderbolt.Plonsey1964ECGGaussCache","text":"Plonsey1964ECGGaussCache(problem, op, φₘ)\n\nHere φₘ is the solution vector containing the transmembranepotential, op is the associated diffusion opeartor and  κₜ is the torso's conductivity.\n\nReturns a cache to compute the lead field with the form proposed in [22] with the Gauss theorem applied to it, as for example described in [23]. Calling evaluate_ecg with this method simply evaluates the following integral efficiently:\n\nvarphi_e(x)=frac14 pi kappa_t int_Omega frac kappa_ φₘ cdot (tildex-x)(tildex-x)^3mathrmdtildex\n\nThe important simplifications taken are:\n\nSurrounding volume is an infinite, homogeneous sphere with isotropic conductivity\nThe extracellular space and surrounding volume share the same isotropic, homogeneous conductivity tensor\n\n\n\n\n\n","category":"type"},{"location":"api-reference/utility/#Thunderbolt.evaluate_ecg","page":"Utility","title":"Thunderbolt.evaluate_ecg","text":"evaluate_ecg(method::Plonsey1964ECGGaussCache, x::Vec, κₜ::Real)\n\nCompute the pseudo ECG at a given point x by evaluating:\n\nvarphi_e(x)=frac14 pi kappa_t int_Omega frac kappa_ φₘ cdot (tildex-x)(tildex-x)^3mathrmdtildex\n\nFor more information please read the docstring for Plonsey1964ECGGaussCache\n\n\n\n\n\n","category":"function"},{"location":"api-reference/problems/","page":"Problems","title":"Problems","text":"DocTestSetup = :(using Thunderbolt)","category":"page"},{"location":"api-reference/problems/#Problems","page":"Problems","title":"Problems","text":"","category":"section"},{"location":"api-reference/problems/","page":"Problems","title":"Problems","text":"Thunderbolt.NullProblem\nThunderbolt.CoupledProblem\nThunderbolt.SplitProblem\nThunderbolt.PartitionedProblem\nThunderbolt.ODEProblem\nThunderbolt.AbstractPointwiseProblem\nThunderbolt.PointwiseODEProblem\nThunderbolt.TransientHeatProblem\nThunderbolt.QuasiStaticNonlinearProblem\nThunderbolt.QuasiStaticODEProblem\nThunderbolt.QuasiStaticDAEProblem","category":"page"},{"location":"","page":"Home","title":"Home","text":"DocTestSetup = :(using Thunderbolt)","category":"page"},{"location":"#Thunderbolt.jl","page":"Home","title":"Thunderbolt.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"A high performance cardiac multiphysics system written in Julia","category":"page"},{"location":"","page":"Home","title":"Home","text":"Welcome to the documentation for Thunderbolt. The main goal of this project is to provide a single framework where we can develop new models and high  performance parallel solvers.","category":"page"},{"location":"","page":"Home","title":"Home","text":"warning: Warning\nThis package is under heavy development. Expect regular breaking changes for now. If you are interested in joining development, then either comment an issue or reach out via julialang.zulipchat.com, via mail or via  julialang.slack.com. Alternatively open a discussion if you have something  specific in mind.","category":"page"},{"location":"","page":"Home","title":"Home","text":"note: Note\nIf you are interested in using this package, then I am also happy to to get some constructive feedback, especially if things don't work out in the current design. This can be done via julialang.slack.com, julialang.zulipchat.com or via mail.","category":"page"},{"location":"","page":"Home","title":"Home","text":"note: Note\nIf you use this package in an academic context, then I would be happy if you could cite it. Please also cite additionally the corresponding sources for models, numerical methods and utilities used in your code via this package.","category":"page"},{"location":"#How-the-documentation-is-organized","page":"Home","title":"How the documentation is organized","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"This high level view of the documentation structure will help you find what you are looking for. The document is organized as follows[1]:","category":"page"},{"location":"","page":"Home","title":"Home","text":"Tutorials are thoroughly documented examples which guides you through the process of building and solving cardiac models in Thunderbolt.\nTopic guides contains more in-depth explanations and discussions about multiphysics modeling concepts and their numerical treatment, and specifically how  these are realized in Thunderbolt.\nAPI Reference contains the technical API reference of functions and methods (e.g. the documentation strings).\nHow-to guides will guide you through the steps involved in addressing common tasks and use-cases. These usually build on top of the tutorials and thus assume basic knowledge of how Thunderbolt works.","category":"page"},{"location":"","page":"Home","title":"Home","text":"[1]: The organization of the document follows the Diátaxis Framework.","category":"page"},{"location":"","page":"Home","title":"Home","text":"In addition there is the Developer documentation, for documentation of Ferrite internal code.","category":"page"},{"location":"#Getting-started","page":"Home","title":"Getting started","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"If you are new to the Thunderbolt project, then it is suggested to start with the tutorials section before tackling more complex problems.","category":"page"},{"location":"","page":"Home","title":"Home","text":"More information coming soon...","category":"page"},{"location":"","page":"Home","title":"Home","text":"TODO refer to an example project via DrWatson.jl.","category":"page"},{"location":"#Getting-help","page":"Home","title":"Getting help","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"If you have questions about Thunderbolt it is suggested to use the #Thunderbolt.jl stream on Zulip. Zulip is preferred over Slack, because the discussions are available over longer time periods.","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"To use Thunderbolt you first need to install Julia, see https://julialang.org/ for details. Installing Thunderbolt can then be done from the Pkg REPL; press ] at the julia> promp to enter pkg> mode:","category":"page"},{"location":"","page":"Home","title":"Home","text":"pkg> add Ferrite#master, https://github.com/termi-official/Thunderbolt.jl#main","category":"page"},{"location":"","page":"Home","title":"Home","text":"note: Note\nThe package is under development, which is why you will need the currently (unreleased) 1.0 version of Ferrite.jl and the (unregistered) Thunderbolt.jl package.","category":"page"},{"location":"","page":"Home","title":"Home","text":"This will install Thunderbolt and all necessary dependencies. Press backspace to get back to the julia> prompt. (See the documentation for Pkg, Julia's package manager, for more help regarding package installation and project management.)","category":"page"},{"location":"","page":"Home","title":"Home","text":"Finally, to load Thunderbolt, use","category":"page"},{"location":"","page":"Home","title":"Home","text":"using Thunderbolt","category":"page"},{"location":"","page":"Home","title":"Home","text":"You are now all set to start using Thunderbolt!","category":"page"},{"location":"#Contributing-to-Thunderbolt","page":"Home","title":"Contributing to Thunderbolt","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Thunderbolt is under very active development. If you find a bug, then please open an issue on GitHub with a reproducer. If you are interested in joining development, then either comment an issue or reach out via Zulip, via mail or via  Slack. Alternatively open a discussion if you have something  specific in mind - please just check for open discussion before opening a new one.","category":"page"},{"location":"","page":"Home","title":"Home","text":"A detailed contributor guide is coming soon...","category":"page"},{"location":"api-reference/discretization/","page":"Discretization","title":"Discretization","text":"DocTestSetup = :(using Thunderbolt)","category":"page"},{"location":"api-reference/discretization/#Discretization","page":"Discretization","title":"Discretization","text":"","category":"section"},{"location":"api-reference/discretization/#Interface","page":"Discretization","title":"Interface","text":"","category":"section"},{"location":"api-reference/discretization/","page":"Discretization","title":"Discretization","text":"FiniteElementDiscretization\nThunderbolt.semidiscretize\nThunderbolt.assemble_element!\nThunderbolt.assemble_face!\nThunderbolt.assemble_interface_coupling_contribution!","category":"page"},{"location":"api-reference/discretization/#Thunderbolt.FiniteElementDiscretization","page":"Discretization","title":"Thunderbolt.FiniteElementDiscretization","text":"\n\n\n\n","category":"type"},{"location":"api-reference/discretization/#Thunderbolt.semidiscretize","page":"Discretization","title":"Thunderbolt.semidiscretize","text":"semidiscretize(model, discretization, mesh)\n\nTransform a space-time model into a pure time-dependent problem.\n\n\n\n\n\n","category":"function"},{"location":"api-reference/discretization/#Common","page":"Discretization","title":"Common","text":"","category":"section"},{"location":"api-reference/discretization/","page":"Discretization","title":"Discretization","text":"Thunderbolt.BilinearMassIntegrator\nThunderbolt.BilinearMassElementCache\nThunderbolt.BilinearDiffusionIntegrator\nThunderbolt.BilinearDiffusionElementCache\nThunderbolt.AnalyticalCoefficientElementCache","category":"page"},{"location":"api-reference/discretization/#Thunderbolt.BilinearMassIntegrator","page":"Discretization","title":"Thunderbolt.BilinearMassIntegrator","text":"Represents the integrand of the bilinear form <ϕ,ψ> = ∫ ρϕ ⋅ ψ dΩ .\n\n\n\n\n\n","category":"type"},{"location":"api-reference/discretization/#Thunderbolt.BilinearDiffusionIntegrator","page":"Discretization","title":"Thunderbolt.BilinearDiffusionIntegrator","text":"Represents the integrand of the bilinear form <ϕ,ψ> = -∫ D∇ϕ ⋅ ∇ψ dΩ .\n\n\n\n\n\n","category":"type"},{"location":"api-reference/discretization/#Solid-Mechanics","page":"Discretization","title":"Solid Mechanics","text":"","category":"section"},{"location":"api-reference/discretization/#Elements","page":"Discretization","title":"Elements","text":"","category":"section"},{"location":"api-reference/discretization/","page":"Discretization","title":"Discretization","text":"Thunderbolt.StructuralElementCache\nThunderbolt.SimpleFaceCache","category":"page"},{"location":"api-reference/discretization/#Thunderbolt.StructuralElementCache","page":"Discretization","title":"Thunderbolt.StructuralElementCache","text":"StructuralElementCache\n\nA generic cache to assemble elements coming from a StructuralModel.\n\n\n\n\n\n","category":"type"}]
}
